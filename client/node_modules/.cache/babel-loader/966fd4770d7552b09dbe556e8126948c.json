{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\John\\\\Desktop\\\\Web Dev\\\\watch-list\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"C:\\\\Users\\\\John\\\\Desktop\\\\Web Dev\\\\watch-list\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport { useState, useEffect } from 'react';\n\nconst useRegisterForm = validate => {\n  const _useState = useState({\n    username: {\n      value: '',\n      errors: []\n    },\n    password: {\n      value: '',\n      errors: []\n    },\n    confirmPassword: {\n      value: '',\n      errors: []\n    }\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        formFields = _useState2[0],\n        setFormFields = _useState2[1];\n\n  const _useState3 = useState(true),\n        _useState4 = _slicedToArray(_useState3, 2),\n        formStatus = _useState4[0],\n        setFormStatus = _useState4[1];\n\n  useEffect(() => {\n    let submitDisabled = true;\n    let fieldCount = 0;\n\n    for (const field in formFields) {\n      if (formFields[field].value && formFields[field].errors.length < 1) {\n        fieldCount++;\n        submitDisabled = false;\n      }\n    }\n\n    if (fieldCount === 3) {\n      setFormStatus(submitDisabled);\n    } else {\n      setFormStatus(true);\n    }\n  }, [formFields]);\n\n  const validateForm = (fieldName, fieldValue) => {\n    switch (fieldName) {\n      case 'username':\n        {\n          const errors = [];\n\n          if (fieldValue.includes(' ')) {\n            errors.push('Username cannot contain spaces');\n          }\n\n          if (fieldValue.length < 1) {\n            errors.push('Username is required');\n          }\n\n          setFormFields(_objectSpread({}, formFields, {\n            [fieldName]: {\n              value: fieldValue,\n              errors\n            }\n          }));\n          break;\n        }\n\n      case 'password':\n        {\n          const errors = [];\n          const passwordField = fieldValue;\n          const confirmPasswordField = formFields.confirmPassword.value;\n\n          if (fieldValue.includes(' ')) {\n            errors.push('Password cannot contain spaces');\n          }\n\n          if (fieldValue.length < 6) {\n            errors.push('Password must contain at least 6 characters');\n          }\n\n          if (passwordField !== confirmPasswordField && confirmPasswordField !== '') {\n            setFormFields(_objectSpread({}, formFields, {\n              [fieldName]: {\n                value: fieldValue,\n                errors\n              },\n              confirmPassword: _objectSpread({}, formFields.confirmPassword, {\n                errors: ['Passwords do not match']\n              })\n            }));\n            break;\n          } else {\n            setFormFields(_objectSpread({}, formFields, {\n              [fieldName]: {\n                value: fieldValue,\n                errors\n              },\n              confirmPassword: _objectSpread({}, formFields.confirmPassword, {\n                errors: []\n              })\n            }));\n            break;\n          }\n        }\n\n      case 'confirmPassword':\n        {\n          const passwordField = formFields.password.value;\n          const confirmPasswordField = fieldValue;\n\n          if (passwordField !== confirmPasswordField) {\n            setFormFields(_objectSpread({}, formFields, {\n              [fieldName]: {\n                value: fieldValue,\n                errors: ['Passwords do not match']\n              }\n            }));\n          } else {\n            setFormFields(_objectSpread({}, formFields, {\n              [fieldName]: {\n                value: fieldValue,\n                errors: []\n              }\n            }));\n          }\n        }\n    }\n  };\n\n  const updateFormFields = field => {\n    const fieldName = field.target.name;\n    const fieldValue = field.target.value;\n    validateForm(fieldName, fieldValue);\n  };\n\n  return {\n    updateFormFields,\n    formFields,\n    formStatus\n  };\n};\n\nexport default useRegisterForm;","map":{"version":3,"sources":["C:\\Users\\John\\Desktop\\Web Dev\\watch-list\\client\\src\\hooks\\useRegisterForm.js"],"names":["useState","useEffect","useRegisterForm","validate","username","value","errors","password","confirmPassword","formFields","setFormFields","formStatus","setFormStatus","submitDisabled","fieldCount","field","length","validateForm","fieldName","fieldValue","includes","push","passwordField","confirmPasswordField","updateFormFields","target","name"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react';\r\n\r\nconst useRegisterForm = validate => {\r\n  const [formFields, setFormFields] = useState({\r\n    username: { value: '', errors: [] },\r\n    password: { value: '', errors: [] },\r\n    confirmPassword: { value: '', errors: [] }\r\n  });\r\n\r\n  const [formStatus, setFormStatus] = useState(true);\r\n\r\n  useEffect(() => {\r\n    let submitDisabled = true;\r\n    let fieldCount = 0;\r\n\r\n    for (const field in formFields) {\r\n      if (formFields[field].value && formFields[field].errors.length < 1) {\r\n        fieldCount++;\r\n        submitDisabled = false;\r\n      }\r\n    }\r\n\r\n    if (fieldCount === 3) {\r\n      setFormStatus(submitDisabled);\r\n    } else {\r\n      setFormStatus(true);\r\n    }\r\n  }, [formFields]);\r\n\r\n  const validateForm = (fieldName, fieldValue) => {\r\n    switch (fieldName) {\r\n      case 'username': {\r\n        const errors = [];\r\n        if (fieldValue.includes(' ')) {\r\n          errors.push('Username cannot contain spaces');\r\n        }\r\n\r\n        if (fieldValue.length < 1) {\r\n          errors.push('Username is required');\r\n        }\r\n\r\n        setFormFields({\r\n          ...formFields,\r\n          [fieldName]: { value: fieldValue, errors }\r\n        });\r\n        break;\r\n      }\r\n\r\n      case 'password': {\r\n        const errors = [];\r\n        const passwordField = fieldValue;\r\n        const confirmPasswordField = formFields.confirmPassword.value;\r\n        if (fieldValue.includes(' ')) {\r\n          errors.push('Password cannot contain spaces');\r\n        }\r\n\r\n        if (fieldValue.length < 6) {\r\n          errors.push('Password must contain at least 6 characters');\r\n        }\r\n\r\n        if (\r\n          passwordField !== confirmPasswordField &&\r\n          confirmPasswordField !== ''\r\n        ) {\r\n          setFormFields({\r\n            ...formFields,\r\n            [fieldName]: { value: fieldValue, errors },\r\n            confirmPassword: {\r\n              ...formFields.confirmPassword,\r\n              errors: ['Passwords do not match']\r\n            }\r\n          });\r\n          break;\r\n        } else {\r\n          setFormFields({\r\n            ...formFields,\r\n            [fieldName]: { value: fieldValue, errors },\r\n            confirmPassword: {\r\n              ...formFields.confirmPassword,\r\n              errors: []\r\n            }\r\n          });\r\n          break;\r\n        }\r\n      }\r\n\r\n      case 'confirmPassword': {\r\n        const passwordField = formFields.password.value;\r\n        const confirmPasswordField = fieldValue;\r\n        if (passwordField !== confirmPasswordField) {\r\n          setFormFields({\r\n            ...formFields,\r\n            [fieldName]: {\r\n              value: fieldValue,\r\n              errors: ['Passwords do not match']\r\n            }\r\n          });\r\n        } else {\r\n          setFormFields({\r\n            ...formFields,\r\n            [fieldName]: { value: fieldValue, errors: [] }\r\n          });\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  const updateFormFields = field => {\r\n    const fieldName = field.target.name;\r\n    const fieldValue = field.target.value;\r\n\r\n    validateForm(fieldName, fieldValue);\r\n  };\r\n\r\n  return { updateFormFields, formFields, formStatus };\r\n};\r\n\r\nexport default useRegisterForm;\r\n"]},"metadata":{},"sourceType":"module"}