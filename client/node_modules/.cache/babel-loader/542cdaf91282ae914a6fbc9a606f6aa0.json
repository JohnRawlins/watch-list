{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\John\\\\Desktop\\\\Web Dev\\\\watch-list\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"C:\\\\Users\\\\John\\\\Desktop\\\\Web Dev\\\\watch-list\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport { useState } from 'react';\n\nconst useForm = () => {\n  const _useState = useState({\n    username: '',\n    password: '',\n    confirmPassword: ''\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        formFields = _useState2[0],\n        setFormFields = _useState2[1];\n\n  const _useState3 = useState({\n    username: [],\n    password: [],\n    confirmPassword: []\n  }),\n        _useState4 = _slicedToArray(_useState3, 2),\n        formErrors = _useState4[0],\n        setFormErrors = _useState4[1];\n\n  const checkInputErrors = (fieldName, fieldValue) => {\n    switch (fieldName) {\n      case 'username':\n        {\n          const errors = [];\n\n          if (fieldValue.includes(' ')) {\n            errors.push('Username cannot contain spaces');\n          }\n\n          if (fieldValue.length < 1) {\n            errors.push('Username is required');\n          }\n\n          setFormErrors(_objectSpread({}, formErrors, {\n            [fieldName]: errors\n          }));\n          break;\n        }\n\n      case 'password':\n        {\n          const errors = [];\n\n          if (fieldValue.includes(' ')) {\n            errors.push('Password cannot contain spaces');\n          }\n\n          if (fieldValue.length < 1) {\n            errors.push('Password is required');\n          }\n\n          if (fieldValue.length < 6) {\n            errors.push('Password must contain at least 6 characters ');\n          }\n\n          checkPasswordMatch(fieldValue, confirmPasswordElem.current.value);\n          setFormErrors(_objectSpread({}, formErrors, {\n            [fieldName]: errors\n          }));\n          break;\n        }\n    }\n  };\n\n  const checkPasswordMatch = (password, confirmPassword) => {\n    if (password !== confirmPassword) {\n      setFormErrors(_objectSpread({}, formErrors, {\n        confirmPassword: ['Passwords do not match']\n      }));\n    } else {\n      setFormErrors(_objectSpread({}, formErrors, {\n        confirmPassword: []\n      }));\n    }\n  };\n\n  const updateFormFields = (field, confirmPasswordElem) => {\n    const fieldName = field.target.name;\n    const fieldValue = field.target.value;\n    checkInputErrors(fieldName, fieldValue, confirmPasswordElem.current.value);\n    setFormFields(_objectSpread({}, formFields, {\n      [fieldName]: fieldValue\n    }));\n  };\n\n  return {\n    updateFormFields,\n    formFields,\n    formErrors\n  };\n};\n\nexport default useForm;","map":{"version":3,"sources":["C:\\Users\\John\\Desktop\\Web Dev\\watch-list\\client\\src\\hooks\\useForm.js"],"names":["useState","useForm","username","password","confirmPassword","formFields","setFormFields","formErrors","setFormErrors","checkInputErrors","fieldName","fieldValue","errors","includes","push","length","checkPasswordMatch","confirmPasswordElem","current","value","updateFormFields","field","target","name"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,OAAzB;;AAEA,MAAMC,OAAO,GAAG,MAAM;AAAA,oBACgBD,QAAQ,CAAC;AAC3CE,IAAAA,QAAQ,EAAE,EADiC;AAE3CC,IAAAA,QAAQ,EAAE,EAFiC;AAG3CC,IAAAA,eAAe,EAAE;AAH0B,GAAD,CADxB;AAAA;AAAA,QACbC,UADa;AAAA,QACDC,aADC;;AAAA,qBAOgBN,QAAQ,CAAC;AAC3CE,IAAAA,QAAQ,EAAE,EADiC;AAE3CC,IAAAA,QAAQ,EAAE,EAFiC;AAG3CC,IAAAA,eAAe,EAAE;AAH0B,GAAD,CAPxB;AAAA;AAAA,QAObG,UAPa;AAAA,QAODC,aAPC;;AAapB,QAAMC,gBAAgB,GAAG,CAACC,SAAD,EAAYC,UAAZ,KAA2B;AAElD,YAAQD,SAAR;AACE,WAAK,UAAL;AAAiB;AACf,gBAAME,MAAM,GAAG,EAAf;;AACA,cAAID,UAAU,CAACE,QAAX,CAAoB,GAApB,CAAJ,EAA8B;AAC5BD,YAAAA,MAAM,CAACE,IAAP,CAAY,gCAAZ;AACD;;AAED,cAAIH,UAAU,CAACI,MAAX,GAAoB,CAAxB,EAA2B;AACzBH,YAAAA,MAAM,CAACE,IAAP,CAAY,sBAAZ;AACD;;AAEDN,UAAAA,aAAa,mBAAMD,UAAN;AAAkB,aAACG,SAAD,GAAaE;AAA/B,aAAb;AACA;AACD;;AAED,WAAK,UAAL;AAAiB;AACf,gBAAMA,MAAM,GAAG,EAAf;;AACA,cAAID,UAAU,CAACE,QAAX,CAAoB,GAApB,CAAJ,EAA8B;AAC5BD,YAAAA,MAAM,CAACE,IAAP,CAAY,gCAAZ;AACD;;AAED,cAAIH,UAAU,CAACI,MAAX,GAAoB,CAAxB,EAA2B;AACzBH,YAAAA,MAAM,CAACE,IAAP,CAAY,sBAAZ;AACD;;AAED,cAAIH,UAAU,CAACI,MAAX,GAAoB,CAAxB,EAA2B;AACzBH,YAAAA,MAAM,CAACE,IAAP,CAAY,8CAAZ;AACD;;AAEDE,UAAAA,kBAAkB,CAACL,UAAD,EAAaM,mBAAmB,CAACC,OAApB,CAA4BC,KAAzC,CAAlB;AAEAX,UAAAA,aAAa,mBAAMD,UAAN;AAAkB,aAACG,SAAD,GAAaE;AAA/B,aAAb;AACA;AACD;AAjCH;AAmCD,GArCD;;AAuCA,QAAMI,kBAAkB,GAAG,CAACb,QAAD,EAAWC,eAAX,KAA+B;AACxD,QAAID,QAAQ,KAAKC,eAAjB,EAAkC;AAChCI,MAAAA,aAAa,mBACRD,UADQ;AAEXH,QAAAA,eAAe,EAAE,CAAC,wBAAD;AAFN,SAAb;AAID,KALD,MAKO;AACLI,MAAAA,aAAa,mBACRD,UADQ;AAEXH,QAAAA,eAAe,EAAE;AAFN,SAAb;AAID;AACF,GAZD;;AAcA,QAAMgB,gBAAgB,GAAG,CAACC,KAAD,EAAQJ,mBAAR,KAAgC;AACvD,UAAMP,SAAS,GAAGW,KAAK,CAACC,MAAN,CAAaC,IAA/B;AACA,UAAMZ,UAAU,GAAGU,KAAK,CAACC,MAAN,CAAaH,KAAhC;AAEAV,IAAAA,gBAAgB,CAACC,SAAD,EAAYC,UAAZ,EAAwBM,mBAAmB,CAACC,OAApB,CAA4BC,KAApD,CAAhB;AAEAb,IAAAA,aAAa,mBAAMD,UAAN;AAAkB,OAACK,SAAD,GAAaC;AAA/B,OAAb;AACD,GAPD;;AASA,SAAO;AAAES,IAAAA,gBAAF;AAAoBf,IAAAA,UAApB;AAAgCE,IAAAA;AAAhC,GAAP;AACD,CA5ED;;AA8EA,eAAeN,OAAf","sourcesContent":["import { useState } from 'react';\r\n\r\nconst useForm = () => {\r\n  const [formFields, setFormFields] = useState({\r\n    username: '',\r\n    password: '',\r\n    confirmPassword: ''\r\n  });\r\n\r\n  const [formErrors, setFormErrors] = useState({\r\n    username: [],\r\n    password: [],\r\n    confirmPassword: []\r\n  });\r\n\r\n  const checkInputErrors = (fieldName, fieldValue) => {\r\n    \r\n    switch (fieldName) {\r\n      case 'username': {\r\n        const errors = [];\r\n        if (fieldValue.includes(' ')) {\r\n          errors.push('Username cannot contain spaces');\r\n        }\r\n\r\n        if (fieldValue.length < 1) {\r\n          errors.push('Username is required');\r\n        }\r\n\r\n        setFormErrors({ ...formErrors, [fieldName]: errors });\r\n        break;\r\n      }\r\n\r\n      case 'password': {\r\n        const errors = [];\r\n        if (fieldValue.includes(' ')) {\r\n          errors.push('Password cannot contain spaces');\r\n        }\r\n\r\n        if (fieldValue.length < 1) {\r\n          errors.push('Password is required');\r\n        }\r\n\r\n        if (fieldValue.length < 6) {\r\n          errors.push('Password must contain at least 6 characters ');\r\n        }\r\n\r\n        checkPasswordMatch(fieldValue, confirmPasswordElem.current.value);\r\n\r\n        setFormErrors({ ...formErrors, [fieldName]: errors });\r\n        break;\r\n      }\r\n    }\r\n  };\r\n\r\n  const checkPasswordMatch = (password, confirmPassword) => {\r\n    if (password !== confirmPassword) {\r\n      setFormErrors({\r\n        ...formErrors,\r\n        confirmPassword: ['Passwords do not match']\r\n      });\r\n    } else {\r\n      setFormErrors({\r\n        ...formErrors,\r\n        confirmPassword: []\r\n      });\r\n    }\r\n  };\r\n\r\n  const updateFormFields = (field, confirmPasswordElem) => {\r\n    const fieldName = field.target.name;\r\n    const fieldValue = field.target.value;\r\n\r\n    checkInputErrors(fieldName, fieldValue, confirmPasswordElem.current.value);\r\n\r\n    setFormFields({ ...formFields, [fieldName]: fieldValue });\r\n  };\r\n\r\n  return { updateFormFields, formFields, formErrors };\r\n};\r\n\r\nexport default useForm;\r\n"]},"metadata":{},"sourceType":"module"}