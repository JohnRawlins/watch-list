{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\John\\\\Desktop\\\\Web Dev\\\\watch-list\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"C:\\\\Users\\\\John\\\\Desktop\\\\Web Dev\\\\watch-list\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport { useState, useEffect } from 'react';\n\nconst useForm = () => {\n  const _useState = useState({\n    username: {\n      value: '',\n      errors: []\n    },\n    password: {\n      value: '',\n      errors: []\n    },\n    confirmPassword: {\n      value: '',\n      errors: []\n    }\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        formFields = _useState2[0],\n        setFormFields = _useState2[1];\n\n  const _useState3 = useState(false),\n        _useState4 = _slicedToArray(_useState3, 2),\n        errorFound = _useState4[0],\n        setErrorFound = _useState4[1];\n\n  const _useState5 = useState(true),\n        _useState6 = _slicedToArray(_useState5, 2),\n        passwordMatch = _useState6[0],\n        setPasswordMatch = _useState6[1];\n\n  const checkInputErrors = (fieldName, fieldValue) => {\n    switch (fieldName) {\n      case 'username':\n        {\n          const errors = [];\n\n          if (fieldValue.includes(' ')) {\n            errors.push('Username cannot contain spaces');\n          }\n\n          if (fieldValue.length < 1) {\n            errors.push('Username is required');\n          }\n\n          setFormErrors(_objectSpread({}, formErrors, {\n            [fieldName]: {\n              value: fieldValue,\n              errors\n            }\n          }));\n          break;\n        }\n\n      case 'password':\n        {\n          const errors = [];\n\n          if (fieldValue.includes(' ')) {\n            errors.push('Password cannot contain spaces');\n          }\n\n          if (fieldValue.length < 6) {\n            errors.push('Password must contain at least 6 characters');\n          }\n\n          if (!passwordMatch) {\n            setFormErrors(_objectSpread({}, formErrors, {\n              [fieldName]: errors,\n              confirmPassword: ['Passwords do not match']\n            }));\n            break;\n          } else {\n            setFormErrors(_objectSpread({}, formErrors, {\n              [fieldName]: errors,\n              confirmPassword: []\n            }));\n            break;\n          }\n        }\n\n      case 'confirmPassword':\n        {\n          if (!passwordMatch) {\n            setFormErrors(_objectSpread({}, formErrors, {\n              [fieldName]: ['Passwords do not match']\n            }));\n          } else {\n            setFormErrors(_objectSpread({}, formErrors, {\n              [fieldName]: []\n            }));\n          }\n        }\n    }\n  };\n\n  const updateFormFields = field => {\n    const fieldName = field.target.name;\n    const fieldValue = field.target.value;\n    checkInputErrors(fieldName, fieldValue);\n  };\n\n  return {\n    updateFormFields,\n    formFields,\n    formErrors,\n    errorFound\n  };\n};\n\nexport default useForm;","map":{"version":3,"sources":["C:\\Users\\John\\Desktop\\Web Dev\\watch-list\\client\\src\\hooks\\useForm.js"],"names":["useState","useEffect","useForm","username","value","errors","password","confirmPassword","formFields","setFormFields","errorFound","setErrorFound","passwordMatch","setPasswordMatch","checkInputErrors","fieldName","fieldValue","includes","push","length","setFormErrors","formErrors","updateFormFields","field","target","name"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;AAEA,MAAMC,OAAO,GAAG,MAAM;AAAA,oBACgBF,QAAQ,CAAC;AAC3CG,IAAAA,QAAQ,EAAE;AAAEC,MAAAA,KAAK,EAAE,EAAT;AAAaC,MAAAA,MAAM,EAAE;AAArB,KADiC;AAE3CC,IAAAA,QAAQ,EAAE;AAAEF,MAAAA,KAAK,EAAE,EAAT;AAAaC,MAAAA,MAAM,EAAE;AAArB,KAFiC;AAG3CE,IAAAA,eAAe,EAAE;AAAEH,MAAAA,KAAK,EAAE,EAAT;AAAaC,MAAAA,MAAM,EAAE;AAArB;AAH0B,GAAD,CADxB;AAAA;AAAA,QACbG,UADa;AAAA,QACDC,aADC;;AAAA,qBAQgBT,QAAQ,CAAC,KAAD,CARxB;AAAA;AAAA,QAQbU,UARa;AAAA,QAQDC,aARC;;AAAA,qBAUsBX,QAAQ,CAAC,IAAD,CAV9B;AAAA;AAAA,QAUbY,aAVa;AAAA,QAUEC,gBAVF;;AAYpB,QAAMC,gBAAgB,GAAG,CAACC,SAAD,EAAYC,UAAZ,KAA2B;AAClD,YAAQD,SAAR;AACE,WAAK,UAAL;AAAiB;AACf,gBAAMV,MAAM,GAAG,EAAf;;AACA,cAAIW,UAAU,CAACC,QAAX,CAAoB,GAApB,CAAJ,EAA8B;AAC5BZ,YAAAA,MAAM,CAACa,IAAP,CAAY,gCAAZ;AACD;;AAED,cAAIF,UAAU,CAACG,MAAX,GAAoB,CAAxB,EAA2B;AACzBd,YAAAA,MAAM,CAACa,IAAP,CAAY,sBAAZ;AACD;;AAEDE,UAAAA,aAAa,mBACRC,UADQ;AAEX,aAACN,SAAD,GAAa;AAAEX,cAAAA,KAAK,EAAEY,UAAT;AAAqBX,cAAAA;AAArB;AAFF,aAAb;AAIA;AACD;;AAED,WAAK,UAAL;AAAiB;AACf,gBAAMA,MAAM,GAAG,EAAf;;AACA,cAAIW,UAAU,CAACC,QAAX,CAAoB,GAApB,CAAJ,EAA8B;AAC5BZ,YAAAA,MAAM,CAACa,IAAP,CAAY,gCAAZ;AACD;;AAED,cAAIF,UAAU,CAACG,MAAX,GAAoB,CAAxB,EAA2B;AACzBd,YAAAA,MAAM,CAACa,IAAP,CAAY,6CAAZ;AACD;;AAED,cAAI,CAACN,aAAL,EAAoB;AAClBQ,YAAAA,aAAa,mBACRC,UADQ;AAEX,eAACN,SAAD,GAAaV,MAFF;AAGXE,cAAAA,eAAe,EAAE,CAAC,wBAAD;AAHN,eAAb;AAKA;AACD,WAPD,MAOO;AACLa,YAAAA,aAAa,mBACRC,UADQ;AAEX,eAACN,SAAD,GAAaV,MAFF;AAGXE,cAAAA,eAAe,EAAE;AAHN,eAAb;AAKA;AACD;AACF;;AAED,WAAK,iBAAL;AAAwB;AACtB,cAAI,CAACK,aAAL,EAAoB;AAClBQ,YAAAA,aAAa,mBACRC,UADQ;AAEX,eAACN,SAAD,GAAa,CAAC,wBAAD;AAFF,eAAb;AAID,WALD,MAKO;AACLK,YAAAA,aAAa,mBACRC,UADQ;AAEX,eAACN,SAAD,GAAa;AAFF,eAAb;AAID;AACF;AAzDH;AA2DD,GA5DD;;AA8DA,QAAMO,gBAAgB,GAAGC,KAAK,IAAI;AAChC,UAAMR,SAAS,GAAGQ,KAAK,CAACC,MAAN,CAAaC,IAA/B;AACA,UAAMT,UAAU,GAAGO,KAAK,CAACC,MAAN,CAAapB,KAAhC;AAEAU,IAAAA,gBAAgB,CAACC,SAAD,EAAYC,UAAZ,CAAhB;AACD,GALD;;AAOA,SAAO;AAAEM,IAAAA,gBAAF;AAAoBd,IAAAA,UAApB;AAAgCa,IAAAA,UAAhC;AAA4CX,IAAAA;AAA5C,GAAP;AACD,CAlFD;;AAoFA,eAAeR,OAAf","sourcesContent":["import { useState, useEffect } from 'react';\r\n\r\nconst useForm = () => {\r\n  const [formFields, setFormFields] = useState({\r\n    username: { value: '', errors: [] },\r\n    password: { value: '', errors: [] },\r\n    confirmPassword: { value: '', errors: [] }\r\n  });\r\n\r\n\r\n  const [errorFound, setErrorFound] = useState(false);\r\n\r\n  const [passwordMatch, setPasswordMatch] = useState(true);\r\n\r\n  const checkInputErrors = (fieldName, fieldValue) => {\r\n    switch (fieldName) {\r\n      case 'username': {\r\n        const errors = [];\r\n        if (fieldValue.includes(' ')) {\r\n          errors.push('Username cannot contain spaces');\r\n        }\r\n\r\n        if (fieldValue.length < 1) {\r\n          errors.push('Username is required');\r\n        }\r\n\r\n        setFormErrors({\r\n          ...formErrors,\r\n          [fieldName]: { value: fieldValue, errors }\r\n        });\r\n        break;\r\n      }\r\n\r\n      case 'password': {\r\n        const errors = [];\r\n        if (fieldValue.includes(' ')) {\r\n          errors.push('Password cannot contain spaces');\r\n        }\r\n\r\n        if (fieldValue.length < 6) {\r\n          errors.push('Password must contain at least 6 characters');\r\n        }\r\n\r\n        if (!passwordMatch) {\r\n          setFormErrors({\r\n            ...formErrors,\r\n            [fieldName]: errors,\r\n            confirmPassword: ['Passwords do not match']\r\n          });\r\n          break;\r\n        } else {\r\n          setFormErrors({\r\n            ...formErrors,\r\n            [fieldName]: errors,\r\n            confirmPassword: []\r\n          });\r\n          break;\r\n        }\r\n      }\r\n\r\n      case 'confirmPassword': {\r\n        if (!passwordMatch) {\r\n          setFormErrors({\r\n            ...formErrors,\r\n            [fieldName]: ['Passwords do not match']\r\n          });\r\n        } else {\r\n          setFormErrors({\r\n            ...formErrors,\r\n            [fieldName]: []\r\n          });\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  const updateFormFields = field => {\r\n    const fieldName = field.target.name;\r\n    const fieldValue = field.target.value;\r\n\r\n    checkInputErrors(fieldName, fieldValue);\r\n  };\r\n\r\n  return { updateFormFields, formFields, formErrors, errorFound };\r\n};\r\n\r\nexport default useForm;\r\n"]},"metadata":{},"sourceType":"module"}