{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\John\\\\Desktop\\\\Web Dev\\\\watch-list\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"C:\\\\Users\\\\John\\\\Desktop\\\\Web Dev\\\\watch-list\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport { useState, useEffect } from 'react';\n\nconst useForm = () => {\n  const _useState = useState({\n    username: {\n      value: ''\n    },\n    password: {\n      value: ''\n    },\n    confirmPassword: {\n      value: ''\n    }\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        formFields = _useState2[0],\n        setFormFields = _useState2[1];\n\n  const _useState3 = useState(true),\n        _useState4 = _slicedToArray(_useState3, 2),\n        formStatus = _useState4[0],\n        setFormStatus = _useState4[1]; // useEffect(() => {\n  //   let submitDisabled = true;\n  //   let fieldCount = 0;\n  //   for (const field in formFields) {\n  //     if (formFields[field].value && formFields[field].errors.length < 1) {\n  //       fieldCount++;\n  //       submitDisabled = false;\n  //     }\n  //   }\n  //   if (fieldCount === 3) {\n  //     setFormStatus(submitDisabled);\n  //   } else {\n  //     setFormStatus(true);\n  //   }\n  // }, [formFields]);\n\n\n  const updateFormFields = field => {\n    const fieldName = field.target.name;\n    const fieldValue = field.target.value; // validateForm(fieldName, fieldValue);\n\n    switch (fieldName) {\n      case 'username':\n        {\n          setFormFields(_objectSpread({}, formFields, {\n            [fieldName]: {\n              value: fieldValue\n            }\n          }));\n          break;\n        }\n\n      case 'password':\n        {\n          setFormFields(_objectSpread({}, formFields, {\n            [fieldName]: {\n              value: fieldValue\n            }\n          }));\n          break;\n        }\n\n      case 'confirmPassword':\n        {\n          setFormFields(_objectSpread({}, formFields, {\n            [fieldName]: {\n              value: fieldValue\n            }\n          }));\n        }\n    }\n  };\n\n  return {\n    updateFormFields,\n    formFields,\n    formStatus\n  };\n};\n\nexport default useForm;","map":{"version":3,"sources":["C:\\Users\\John\\Desktop\\Web Dev\\watch-list\\client\\src\\hooks\\useForm.js"],"names":["useState","useEffect","useForm","username","value","password","confirmPassword","formFields","setFormFields","formStatus","setFormStatus","updateFormFields","field","fieldName","target","name","fieldValue"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;AAEA,MAAMC,OAAO,GAAG,MAAM;AAAA,oBACgBF,QAAQ,CAAC;AAC3CG,IAAAA,QAAQ,EAAE;AAAEC,MAAAA,KAAK,EAAE;AAAT,KADiC;AAE3CC,IAAAA,QAAQ,EAAE;AAAED,MAAAA,KAAK,EAAE;AAAT,KAFiC;AAG3CE,IAAAA,eAAe,EAAE;AAAEF,MAAAA,KAAK,EAAE;AAAT;AAH0B,GAAD,CADxB;AAAA;AAAA,QACbG,UADa;AAAA,QACDC,aADC;;AAAA,qBAOgBR,QAAQ,CAAC,IAAD,CAPxB;AAAA;AAAA,QAObS,UAPa;AAAA,QAODC,aAPC,kBASlB;AACF;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAGA,QAAMC,gBAAgB,GAAGC,KAAK,IAAI;AAChC,UAAMC,SAAS,GAAGD,KAAK,CAACE,MAAN,CAAaC,IAA/B;AACA,UAAMC,UAAU,GAAGJ,KAAK,CAACE,MAAN,CAAaV,KAAhC,CAFgC,CAIhC;;AAEA,YAAQS,SAAR;AACE,WAAK,UAAL;AAAiB;AACfL,UAAAA,aAAa,mBACRD,UADQ;AAEX,aAACM,SAAD,GAAa;AAAET,cAAAA,KAAK,EAAEY;AAAT;AAFF,aAAb;AAIA;AACD;;AAED,WAAK,UAAL;AAAiB;AACfR,UAAAA,aAAa,mBACRD,UADQ;AAEX,aAACM,SAAD,GAAa;AAAET,cAAAA,KAAK,EAAEY;AAAT;AAFF,aAAb;AAIA;AACD;;AAED,WAAK,iBAAL;AAAwB;AACtBR,UAAAA,aAAa,mBACRD,UADQ;AAEX,aAACM,SAAD,GAAa;AAAET,cAAAA,KAAK,EAAEY;AAAT;AAFF,aAAb;AAID;AAtBH;AAwBD,GA9BD;;AAgCA,SAAO;AAAEL,IAAAA,gBAAF;AAAoBJ,IAAAA,UAApB;AAAgCE,IAAAA;AAAhC,GAAP;AAKD,CAjED;;AAmEA,eAAeP,OAAf","sourcesContent":["import { useState, useEffect } from 'react';\r\n\r\nconst useForm = () => {\r\n  const [formFields, setFormFields] = useState({\r\n    username: { value: ''},\r\n    password: { value: ''},\r\n    confirmPassword: { value: ''}\r\n  });\r\n\r\n  const [formStatus, setFormStatus] = useState(true);\r\n\r\n    // useEffect(() => {\r\n  //   let submitDisabled = true;\r\n  //   let fieldCount = 0;\r\n\r\n  //   for (const field in formFields) {\r\n  //     if (formFields[field].value && formFields[field].errors.length < 1) {\r\n  //       fieldCount++;\r\n  //       submitDisabled = false;\r\n  //     }\r\n  //   }\r\n\r\n  //   if (fieldCount === 3) {\r\n  //     setFormStatus(submitDisabled);\r\n  //   } else {\r\n  //     setFormStatus(true);\r\n  //   }\r\n  // }, [formFields]);\r\n\r\n\r\n  const updateFormFields = field => {\r\n    const fieldName = field.target.name;\r\n    const fieldValue = field.target.value;\r\n\r\n    // validateForm(fieldName, fieldValue);\r\n\r\n    switch (fieldName) {\r\n      case 'username': {\r\n        setFormFields({\r\n          ...formFields,\r\n          [fieldName]: { value: fieldValue }\r\n        });\r\n        break;\r\n      }\r\n\r\n      case 'password': {\r\n        setFormFields({\r\n          ...formFields,\r\n          [fieldName]: { value: fieldValue }\r\n        });\r\n        break;\r\n      }\r\n\r\n      case 'confirmPassword': {\r\n        setFormFields({\r\n          ...formFields,\r\n          [fieldName]: { value: fieldValue }\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  return { updateFormFields, formFields, formStatus };\r\n\r\n\r\n\r\n  \r\n};\r\n\r\nexport default useForm;\r\n"]},"metadata":{},"sourceType":"module"}