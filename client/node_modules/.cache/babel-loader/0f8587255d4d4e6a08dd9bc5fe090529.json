{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\John\\\\Desktop\\\\Web Dev\\\\watch-list\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"C:\\\\Users\\\\John\\\\Desktop\\\\Web Dev\\\\watch-list\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport { useState } from 'react';\n\nconst useForm = () => {\n  const _useState = useState({\n    username: '',\n    password: '',\n    confirmPassword: ''\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        formFields = _useState2[0],\n        setFormFields = _useState2[1];\n\n  const _useState3 = useState({\n    username: [],\n    password: [],\n    confirmPassword: []\n  }),\n        _useState4 = _slicedToArray(_useState3, 2),\n        formErrors = _useState4[0],\n        setFormErrors = _useState4[1];\n\n  const checkInputErrors = (fieldName, fieldValue, confirmPasswordElem) => {\n    const matchError = [];\n\n    if (confirmPasswordElem && fieldValue !== confirmPasswordElem.current.value) {\n      matchError.push('Passwords do not match');\n    }\n\n    switch (fieldName) {\n      case 'username':\n        {\n          const errors = [];\n\n          if (fieldValue.includes(' ')) {\n            errors.push('Username cannot contain spaces');\n          }\n\n          if (fieldValue.length < 1) {\n            errors.push('Username is required');\n          }\n\n          setFormErrors(_objectSpread({}, formErrors, {\n            [fieldName]: errors\n          }));\n          break;\n        }\n\n      case 'password':\n        {\n          const errors = [];\n\n          if (fieldValue.includes(' ')) {\n            errors.push('Password cannot contain spaces');\n          }\n\n          if (fieldValue.length < 1) {\n            errors.push('Password is required');\n          }\n\n          if (fieldValue.length < 6) {\n            errors.push('Password must contain at least 6 characters ');\n          }\n\n          setFormErrors(_objectSpread({}, formErrors, {\n            [fieldName]: errors,\n            confirmPassword: matchError\n          }));\n          break;\n        }\n    }\n  };\n\n  const checkPasswordMatch = (password, confirmPassword) => {\n    if (confirmPassword && password !== confirmPassword.current.value) {\n      console.log('hey');\n      setFormErrors(_objectSpread({}, formErrors, {\n        confirmPassword: ['Passwords do not match']\n      }));\n    } else {\n      console.log('bye');\n      setFormErrors(_objectSpread({}, formErrors, {\n        confirmPassword: []\n      }));\n    }\n  };\n\n  const updateFormFields = (field, confirmPasswordElem) => {\n    const fieldName = field.target.name;\n    const fieldValue = field.target.value;\n    checkInputErrors(fieldName, fieldValue, confirmPasswordElem);\n    setFormFields(_objectSpread({}, formFields, {\n      [fieldName]: fieldValue\n    }));\n  };\n\n  return {\n    updateFormFields,\n    formFields,\n    formErrors\n  };\n};\n\nexport default useForm;","map":{"version":3,"sources":["C:\\Users\\John\\Desktop\\Web Dev\\watch-list\\client\\src\\hooks\\useForm.js"],"names":["useState","useForm","username","password","confirmPassword","formFields","setFormFields","formErrors","setFormErrors","checkInputErrors","fieldName","fieldValue","confirmPasswordElem","matchError","current","value","push","errors","includes","length","checkPasswordMatch","console","log","updateFormFields","field","target","name"],"mappings":"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","sourcesContent":["import { useState } from 'react';\r\n\r\nconst useForm = () => {\r\n  const [formFields, setFormFields] = useState({\r\n    username: '',\r\n    password: '',\r\n    confirmPassword: ''\r\n  });\r\n\r\n  const [formErrors, setFormErrors] = useState({\r\n    username: [],\r\n    password: [],\r\n    confirmPassword: []\r\n  });\r\n\r\n  const checkInputErrors = (fieldName, fieldValue, confirmPasswordElem) => {\r\n    const matchError = [];\r\n\r\n    if (\r\n      confirmPasswordElem &&\r\n      fieldValue !== confirmPasswordElem.current.value\r\n    ) {\r\n      matchError.push('Passwords do not match');\r\n    }\r\n    \r\n    switch (fieldName) {\r\n      case 'username': {\r\n        const errors = [];\r\n        if (fieldValue.includes(' ')) {\r\n          errors.push('Username cannot contain spaces');\r\n        }\r\n\r\n        if (fieldValue.length < 1) {\r\n          errors.push('Username is required');\r\n        }\r\n\r\n        setFormErrors({ ...formErrors, [fieldName]: errors });\r\n        break;\r\n      }\r\n\r\n      case 'password': {\r\n        const errors = [];\r\n        if (fieldValue.includes(' ')) {\r\n          errors.push('Password cannot contain spaces');\r\n        }\r\n\r\n        if (fieldValue.length < 1) {\r\n          errors.push('Password is required');\r\n        }\r\n\r\n        if (fieldValue.length < 6) {\r\n          errors.push('Password must contain at least 6 characters ');\r\n        }\r\n\r\n        setFormErrors({\r\n          ...formErrors,\r\n          [fieldName]: errors,\r\n          confirmPassword: matchError\r\n        });\r\n        break;\r\n      }\r\n    }\r\n  };\r\n\r\n  const checkPasswordMatch = (password, confirmPassword) => {\r\n    if (confirmPassword && password !== confirmPassword.current.value) {\r\n      console.log('hey');\r\n      setFormErrors({\r\n        ...formErrors,\r\n        confirmPassword: ['Passwords do not match']\r\n      });\r\n    } else {\r\n      console.log('bye');\r\n      setFormErrors({\r\n        ...formErrors,\r\n        confirmPassword: []\r\n      });\r\n    }\r\n  };\r\n\r\n  const updateFormFields = (field, confirmPasswordElem) => {\r\n    const fieldName = field.target.name;\r\n    const fieldValue = field.target.value;\r\n\r\n    checkInputErrors(fieldName, fieldValue, confirmPasswordElem);\r\n\r\n    setFormFields({ ...formFields, [fieldName]: fieldValue });\r\n  };\r\n\r\n  return { updateFormFields, formFields, formErrors };\r\n};\r\n\r\nexport default useForm;\r\n"]},"metadata":{},"sourceType":"module"}