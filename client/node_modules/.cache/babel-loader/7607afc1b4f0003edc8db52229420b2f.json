{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\John\\\\Desktop\\\\Web Dev\\\\watch-list\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"C:\\\\Users\\\\John\\\\Desktop\\\\Web Dev\\\\watch-list\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport { useState, useEffect } from 'react';\n\nconst useForm = () => {\n  const _useState = useState({\n    username: '',\n    password: '',\n    confirmPassword: ''\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        formFields = _useState2[0],\n        setFormFields = _useState2[1];\n\n  const _useState3 = useState({\n    username: [],\n    password: [],\n    confirmPassword: []\n  }),\n        _useState4 = _slicedToArray(_useState3, 2),\n        formErrors = _useState4[0],\n        setFormErrors = _useState4[1];\n\n  const _useState5 = useState(false),\n        _useState6 = _slicedToArray(_useState5, 2),\n        errorFound = _useState6[0],\n        setErrorFound = _useState6[1];\n\n  useEffect(() => {\n    let errorFound = false; // add code for password match\n\n    if (formFields.confirmPassword !== '' && formFields.password !== formFields.confirmPassword) {\n      console.log(formFields);\n      setFormErrors(_objectSpread({}, formErrors, {\n        confirmPassword: ['Passwords do not match']\n      }));\n    } else {\n      setFormErrors(_objectSpread({}, formErrors, {\n        confirmPassword: []\n      }));\n    }\n\n    for (const field in formErrors) {\n      if (formErrors[field].length > 0) {\n        errorFound = true;\n      }\n    }\n\n    setErrorFound(errorFound);\n  }, [formErrors.confirmPassword, errorFound]);\n  let passwordMatchError = false;\n\n  const updateFormFields = field => {\n    const fieldName = field.target.name;\n    const fieldValue = field.target.value; // if (\n    //   confirmPasswordElem &&\n    //   passwordElem &&\n    //   confirmPasswordElem.current.value !== passwordElem.current.value\n    // ) {\n    //   passwordMatchError = true;\n    // }\n\n    checkInputErrors(fieldName, fieldValue);\n    setFormFields(_objectSpread({}, formFields, {\n      [fieldName]: fieldValue\n    }));\n  };\n\n  const checkInputErrors = (fieldName, fieldValue) => {\n    switch (fieldName) {\n      case 'username':\n        {\n          const errors = [];\n\n          if (fieldValue.includes(' ')) {\n            errors.push('Username cannot contain spaces');\n          }\n\n          if (fieldValue.length < 1) {\n            errors.push('Username is required');\n          }\n\n          setFormErrors(_objectSpread({}, formErrors, {\n            [fieldName]: errors\n          }));\n          break;\n        }\n\n      case 'password':\n        {\n          const errors = [];\n\n          if (fieldValue.includes(' ')) {\n            errors.push('Password cannot contain spaces');\n          }\n\n          if (fieldValue.length < 6) {\n            errors.push('Password must contain at least 6 characters');\n          } // if (passwordMatchError) {\n          //   setFormErrors({\n          //     ...formErrors,\n          //     [fieldName]: errors,\n          //     confirmPassword: ['Passwords do not match']\n          //   });\n          //   break;\n          // } else {\n\n\n          setFormErrors(_objectSpread({}, formErrors, {\n            [fieldName]: errors\n          }));\n          break;\n        }\n      // case 'confirmPassword': {\n      //   if (passwordMatchError) {\n      //     setFormErrors({\n      //       ...formErrors,\n      //       [fieldName]: ['Passwords do not match']\n      //     });\n      //   } else {\n      //     setFormErrors({\n      //       ...formErrors,\n      //       [fieldName]: []\n      //     });\n      //   }\n      // }\n    }\n  };\n\n  return {\n    updateFormFields,\n    formFields,\n    formErrors,\n    errorFound\n  };\n};\n\nexport default useForm;","map":{"version":3,"sources":["C:\\Users\\John\\Desktop\\Web Dev\\watch-list\\client\\src\\hooks\\useForm.js"],"names":["useState","useEffect","useForm","username","password","confirmPassword","formFields","setFormFields","formErrors","setFormErrors","errorFound","setErrorFound","console","log","field","length","passwordMatchError","updateFormFields","fieldName","target","name","fieldValue","value","checkInputErrors","errors","includes","push"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;AAEA,MAAMC,OAAO,GAAG,MAAM;AAAA,oBACgBF,QAAQ,CAAC;AAC3CG,IAAAA,QAAQ,EAAE,EADiC;AAE3CC,IAAAA,QAAQ,EAAE,EAFiC;AAG3CC,IAAAA,eAAe,EAAE;AAH0B,GAAD,CADxB;AAAA;AAAA,QACbC,UADa;AAAA,QACDC,aADC;;AAAA,qBAOgBP,QAAQ,CAAC;AAC3CG,IAAAA,QAAQ,EAAE,EADiC;AAE3CC,IAAAA,QAAQ,EAAE,EAFiC;AAG3CC,IAAAA,eAAe,EAAE;AAH0B,GAAD,CAPxB;AAAA;AAAA,QAObG,UAPa;AAAA,QAODC,aAPC;;AAAA,qBAagBT,QAAQ,CAAC,KAAD,CAbxB;AAAA;AAAA,QAabU,UAba;AAAA,QAaDC,aAbC;;AAepBV,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIS,UAAU,GAAG,KAAjB,CADc,CAGd;;AACA,QACEJ,UAAU,CAACD,eAAX,KAA+B,EAA/B,IACAC,UAAU,CAACF,QAAX,KAAwBE,UAAU,CAACD,eAFrC,EAGE;AAEAO,MAAAA,OAAO,CAACC,GAAR,CAAYP,UAAZ;AACAG,MAAAA,aAAa,mBACRD,UADQ;AAEXH,QAAAA,eAAe,EAAE,CAAC,wBAAD;AAFN,SAAb;AAID,KAVD,MAWI;AACFI,MAAAA,aAAa,mBACRD,UADQ;AAEXH,QAAAA,eAAe,EAAE;AAFN,SAAb;AAID;;AAED,SAAK,MAAMS,KAAX,IAAoBN,UAApB,EAAgC;AAC9B,UAAIA,UAAU,CAACM,KAAD,CAAV,CAAkBC,MAAlB,GAA2B,CAA/B,EAAkC;AAChCL,QAAAA,UAAU,GAAG,IAAb;AACD;AACF;;AAEDC,IAAAA,aAAa,CAACD,UAAD,CAAb;AACD,GA7BQ,EA6BN,CAACF,UAAU,CAACH,eAAZ,EAA6BK,UAA7B,CA7BM,CAAT;AA+BA,MAAIM,kBAAkB,GAAG,KAAzB;;AAEA,QAAMC,gBAAgB,GAAIH,KAAD,IAAW;AAClC,UAAMI,SAAS,GAAGJ,KAAK,CAACK,MAAN,CAAaC,IAA/B;AACA,UAAMC,UAAU,GAAGP,KAAK,CAACK,MAAN,CAAaG,KAAhC,CAFkC,CAIlC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAC,IAAAA,gBAAgB,CAACL,SAAD,EAAYG,UAAZ,CAAhB;AAEAd,IAAAA,aAAa,mBAAMD,UAAN;AAAkB,OAACY,SAAD,GAAaG;AAA/B,OAAb;AACD,GAfD;;AAiBA,QAAME,gBAAgB,GAAG,CAACL,SAAD,EAAYG,UAAZ,KAA2B;AAClD,YAAQH,SAAR;AACE,WAAK,UAAL;AAAiB;AACf,gBAAMM,MAAM,GAAG,EAAf;;AACA,cAAIH,UAAU,CAACI,QAAX,CAAoB,GAApB,CAAJ,EAA8B;AAC5BD,YAAAA,MAAM,CAACE,IAAP,CAAY,gCAAZ;AACD;;AAED,cAAIL,UAAU,CAACN,MAAX,GAAoB,CAAxB,EAA2B;AACzBS,YAAAA,MAAM,CAACE,IAAP,CAAY,sBAAZ;AACD;;AAEDjB,UAAAA,aAAa,mBAAMD,UAAN;AAAkB,aAACU,SAAD,GAAaM;AAA/B,aAAb;AACA;AACD;;AAED,WAAK,UAAL;AAAiB;AACf,gBAAMA,MAAM,GAAG,EAAf;;AACA,cAAIH,UAAU,CAACI,QAAX,CAAoB,GAApB,CAAJ,EAA8B;AAC5BD,YAAAA,MAAM,CAACE,IAAP,CAAY,gCAAZ;AACD;;AAED,cAAIL,UAAU,CAACN,MAAX,GAAoB,CAAxB,EAA2B;AACzBS,YAAAA,MAAM,CAACE,IAAP,CAAY,6CAAZ;AACD,WARc,CAUf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACEjB,UAAAA,aAAa,mBACRD,UADQ;AAEX,aAACU,SAAD,GAAaM;AAFF,aAAb;AAIA;AACD;AAGH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AArDF;AAuDD,GAxDD;;AA0DA,SAAO;AAAEP,IAAAA,gBAAF;AAAoBX,IAAAA,UAApB;AAAgCE,IAAAA,UAAhC;AAA4CE,IAAAA;AAA5C,GAAP;AACD,CA5HD;;AA8HA,eAAeR,OAAf","sourcesContent":["import { useState, useEffect } from 'react';\r\n\r\nconst useForm = () => {\r\n  const [formFields, setFormFields] = useState({\r\n    username: '',\r\n    password: '',\r\n    confirmPassword: ''\r\n  });\r\n\r\n  const [formErrors, setFormErrors] = useState({\r\n    username: [],\r\n    password: [],\r\n    confirmPassword: []\r\n  });\r\n\r\n  const [errorFound, setErrorFound] = useState(false);\r\n\r\n  useEffect(() => {\r\n    let errorFound = false;\r\n\r\n    // add code for password match\r\n    if (\r\n      formFields.confirmPassword !== '' &&\r\n      formFields.password !== formFields.confirmPassword\r\n    ) {\r\n\r\n      console.log(formFields);\r\n      setFormErrors({\r\n        ...formErrors,\r\n        confirmPassword: ['Passwords do not match']\r\n      });\r\n    }\r\n    else{\r\n      setFormErrors({\r\n        ...formErrors,\r\n        confirmPassword: []\r\n      });\r\n    }\r\n\r\n    for (const field in formErrors) {\r\n      if (formErrors[field].length > 0) {\r\n        errorFound = true;\r\n      }\r\n    }\r\n\r\n    setErrorFound(errorFound);\r\n  }, [formErrors.confirmPassword, errorFound]);\r\n\r\n  let passwordMatchError = false;\r\n\r\n  const updateFormFields = (field) => {\r\n    const fieldName = field.target.name;\r\n    const fieldValue = field.target.value;\r\n\r\n    // if (\r\n    //   confirmPasswordElem &&\r\n    //   passwordElem &&\r\n    //   confirmPasswordElem.current.value !== passwordElem.current.value\r\n    // ) {\r\n    //   passwordMatchError = true;\r\n    // }\r\n\r\n    checkInputErrors(fieldName, fieldValue);\r\n\r\n    setFormFields({ ...formFields, [fieldName]: fieldValue });\r\n  };\r\n\r\n  const checkInputErrors = (fieldName, fieldValue) => {\r\n    switch (fieldName) {\r\n      case 'username': {\r\n        const errors = [];\r\n        if (fieldValue.includes(' ')) {\r\n          errors.push('Username cannot contain spaces');\r\n        }\r\n\r\n        if (fieldValue.length < 1) {\r\n          errors.push('Username is required');\r\n        }\r\n\r\n        setFormErrors({ ...formErrors, [fieldName]: errors });\r\n        break;\r\n      }\r\n\r\n      case 'password': {\r\n        const errors = [];\r\n        if (fieldValue.includes(' ')) {\r\n          errors.push('Password cannot contain spaces');\r\n        }\r\n\r\n        if (fieldValue.length < 6) {\r\n          errors.push('Password must contain at least 6 characters');\r\n        }\r\n\r\n        // if (passwordMatchError) {\r\n        //   setFormErrors({\r\n        //     ...formErrors,\r\n        //     [fieldName]: errors,\r\n        //     confirmPassword: ['Passwords do not match']\r\n        //   });\r\n        //   break;\r\n        // } else {\r\n          setFormErrors({\r\n            ...formErrors,\r\n            [fieldName]: errors\r\n          });\r\n          break;\r\n        }\r\n      \r\n\r\n      // case 'confirmPassword': {\r\n      //   if (passwordMatchError) {\r\n      //     setFormErrors({\r\n      //       ...formErrors,\r\n      //       [fieldName]: ['Passwords do not match']\r\n      //     });\r\n      //   } else {\r\n      //     setFormErrors({\r\n      //       ...formErrors,\r\n      //       [fieldName]: []\r\n      //     });\r\n      //   }\r\n      // }\r\n    }\r\n  };\r\n\r\n  return { updateFormFields, formFields, formErrors, errorFound };\r\n};\r\n\r\nexport default useForm;\r\n"]},"metadata":{},"sourceType":"module"}