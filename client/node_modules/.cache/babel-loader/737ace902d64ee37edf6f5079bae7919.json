{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\John\\\\Desktop\\\\Web Dev\\\\watch-list\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"C:\\\\Users\\\\John\\\\Desktop\\\\Web Dev\\\\watch-list\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\John\\\\Desktop\\\\Web Dev\\\\watch-list\\\\client\\\\src\\\\components\\\\Register.js\";\nimport React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport watchListLogo from \"../img/watchlist-logo.svg\";\nimport AuthError from './AuthError';\nimport '../css/register.scss';\n\nconst Register = () => {\n  const _useState = useState({\n    username: '',\n    password: '',\n    confirmPassword: ''\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        registerFields = _useState2[0],\n        setRegisterFields = _useState2[1];\n\n  const _useState3 = useState({\n    username: [],\n    password: []\n  }),\n        _useState4 = _slicedToArray(_useState3, 2),\n        registerFieldErrors = _useState4[0],\n        setRegisterFieldErrors = _useState4[1];\n\n  const checkInputValues = (fieldName, fieldValue) => {\n    switch (fieldName) {\n      case 'username':\n        {\n          const inputErrors = [];\n\n          if (fieldValue.includes(' ')) {\n            inputErrors.push('Username cannot contain any spaces');\n          }\n\n          if (fieldValue.length < 1) {\n            inputErrors.push('Username is required');\n          }\n\n          setRegisterFieldErrors(_objectSpread({}, registerFieldErrors, {\n            username: inputErrors\n          }));\n          break;\n        }\n\n      case 'password':\n        {\n          const inputErrors = [];\n\n          if (fieldValue.includes(' ')) {\n            inputErrors.push('Password cannot contain any spaces');\n          }\n\n          if (fieldValue.length < 1) {\n            inputErrors.push('Password is required');\n          }\n\n          if (fieldValue.length < 6) {\n            inputErrors.push('Password needs to have a minimum of 6 characters');\n          }\n\n          if (registerFields.confirmPassword.length > 1 && fieldValue !== registerFields.confirmPassword) {\n            inputErrors.push('Passwords do not match');\n          }\n\n          setRegisterFieldErrors(_objectSpread({}, registerFieldErrors, {\n            password: inputErrors\n          }));\n          break;\n        }\n\n      case 'confirmPassword':\n        {\n          const inputErrors = [];\n\n          if (fieldValue !== registerFields.password) {\n            inputErrors.push('Passwords do not match');\n          }\n\n          setRegisterFieldErrors(_objectSpread({}, registerFieldErrors, {\n            confirmPassword: inputErrors\n          }));\n          break;\n        }\n    }\n  };\n\n  const handleFormFields = event => {\n    const fieldName = event.target.name;\n    const fieldValue = event.target.value;\n\n    switch (fieldName) {\n      case 'username':\n        setRegisterFields(_objectSpread({}, registerFields, {\n          username: fieldValue\n        }));\n        checkInputValues(fieldName, fieldValue);\n        break;\n\n      case 'password':\n        setRegisterFields(_objectSpread({}, registerFields, {\n          password: fieldValue\n        }));\n        checkInputValues(fieldName, fieldValue);\n        break;\n\n      case 'confirmPassword':\n        setRegisterFields(_objectSpread({}, registerFields, {\n          confirmPassword: fieldValue\n        }));\n        checkInputValues(fieldName, fieldValue);\n        break;\n    }\n  };\n\n  return React.createElement(\"div\", {\n    className: \"register\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"register-header\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  }, React.createElement(\"img\", {\n    className: \"register-header__logo\",\n    src: watchListLogo,\n    alt: \"Smiling TV\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }), React.createElement(\"h1\", {\n    className: \"register-header__title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  }, \"Watch List\")), React.createElement(\"form\", {\n    className: \"register-form\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116\n    },\n    __self: this\n  }, React.createElement(AuthError, {\n    registerFieldErrors: registerFieldErrors,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117\n    },\n    __self: this\n  }), React.createElement(\"label\", {\n    className: \"register-form-label\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    className: \"label-text\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  }, \"Username\"), React.createElement(\"input\", {\n    className: \"register-form__username\",\n    type: \"text\",\n    name: \"username\",\n    value: registerFields.username,\n    onChange: handleFormFields,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120\n    },\n    __self: this\n  })), React.createElement(\"label\", {\n    className: \"register-form-label\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    className: \"label-text\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129\n    },\n    __self: this\n  }, \"Password\"), React.createElement(\"input\", {\n    className: \"register-form__password\",\n    type: \"password\",\n    name: \"password\",\n    value: registerFields.password,\n    onChange: handleFormFields,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130\n    },\n    __self: this\n  })), React.createElement(\"label\", {\n    className: \"register-form-label\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    className: \"label-text\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139\n    },\n    __self: this\n  }, \"Confirm Password\"), React.createElement(\"input\", {\n    className: \"register-form__confirm-password\",\n    type: \"password\",\n    name: \"confirmPassword\",\n    value: registerFields.confirmPassword,\n    onChange: handleFormFields,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140\n    },\n    __self: this\n  })), React.createElement(\"input\", {\n    className: \"register-form__submit\",\n    type: \"submit\",\n    value: \"Register\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"register-links\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"register-signin\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    className: \"register-signin__message\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157\n    },\n    __self: this\n  }, \"Already Have An Account?\"), React.createElement(Link, {\n    to: \"/login\",\n    className: \"register-signin__link\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158\n    },\n    __self: this\n  }, \"Sign In\")), React.createElement(Link, {\n    to: \"/\",\n    className: \"register-links__guest\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162\n    },\n    __self: this\n  }, \"Guest\")));\n};\n\nexport default Register;","map":{"version":3,"sources":["C:\\Users\\John\\Desktop\\Web Dev\\watch-list\\client\\src\\components\\Register.js"],"names":["React","useState","Link","AuthError","Register","username","password","confirmPassword","registerFields","setRegisterFields","registerFieldErrors","setRegisterFieldErrors","checkInputValues","fieldName","fieldValue","inputErrors","includes","push","length","handleFormFields","event","target","name","value","watchListLogo"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport watchListLogo from '../img/watchlist-logo.svg';\r\nimport AuthError from './AuthError';\r\nimport '../css/register.scss';\r\n\r\nconst Register = () => {\r\n  const [registerFields, setRegisterFields] = useState({\r\n    username: '',\r\n    password: '',\r\n    confirmPassword: ''\r\n  });\r\n\r\n  const [registerFieldErrors, setRegisterFieldErrors] = useState({\r\n    username: [],\r\n    password: [],\r\n  });\r\n\r\n  const checkInputValues = (fieldName, fieldValue) => {\r\n    switch (fieldName) {\r\n      case 'username': {\r\n        const inputErrors = [];\r\n        if (fieldValue.includes(' ')) {\r\n          inputErrors.push('Username cannot contain any spaces');\r\n        }\r\n\r\n        if (fieldValue.length < 1) {\r\n          inputErrors.push('Username is required');\r\n        }\r\n        setRegisterFieldErrors({\r\n          ...registerFieldErrors,\r\n          username: inputErrors\r\n        });\r\n\r\n        break;\r\n      }\r\n\r\n      case 'password': {\r\n        const inputErrors = [];\r\n        if (fieldValue.includes(' ')) {\r\n          inputErrors.push('Password cannot contain any spaces');\r\n        }\r\n\r\n        if (fieldValue.length < 1) {\r\n          inputErrors.push('Password is required');\r\n        }\r\n\r\n        if (fieldValue.length < 6) {\r\n          inputErrors.push('Password needs to have a minimum of 6 characters');\r\n        }\r\n\r\n        if (\r\n          registerFields.confirmPassword.length > 1 &&\r\n          fieldValue !== registerFields.confirmPassword\r\n        ) {\r\n          inputErrors.push('Passwords do not match');\r\n        }\r\n\r\n        setRegisterFieldErrors({\r\n          ...registerFieldErrors,\r\n          password: inputErrors\r\n        });\r\n\r\n        break;\r\n      }\r\n\r\n      case 'confirmPassword': {\r\n        const inputErrors = [];\r\n\r\n        if (fieldValue !== registerFields.password) {\r\n          inputErrors.push('Passwords do not match');\r\n        }\r\n\r\n        setRegisterFieldErrors({\r\n          ...registerFieldErrors,\r\n          confirmPassword: inputErrors,\r\n        });\r\n\r\n        break;\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleFormFields = event => {\r\n    const fieldName = event.target.name;\r\n    const fieldValue = event.target.value;\r\n    switch (fieldName) {\r\n      case 'username':\r\n        setRegisterFields({ ...registerFields, username: fieldValue });\r\n        checkInputValues(fieldName, fieldValue);\r\n        break;\r\n\r\n      case 'password':\r\n        setRegisterFields({ ...registerFields, password: fieldValue });\r\n        checkInputValues(fieldName, fieldValue);\r\n        break;\r\n\r\n      case 'confirmPassword':\r\n        setRegisterFields({ ...registerFields, confirmPassword: fieldValue });\r\n        checkInputValues(fieldName, fieldValue);\r\n        break;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"register\">\r\n      <div className=\"register-header\">\r\n        <img\r\n          className=\"register-header__logo\"\r\n          src={watchListLogo}\r\n          alt=\"Smiling TV\"\r\n        />\r\n        <h1 className=\"register-header__title\">Watch List</h1>\r\n      </div>\r\n\r\n      <form className=\"register-form\">\r\n        <AuthError registerFieldErrors={registerFieldErrors} />\r\n        <label className=\"register-form-label\">\r\n          <span className=\"label-text\">Username</span>\r\n          <input\r\n            className=\"register-form__username\"\r\n            type=\"text\"\r\n            name=\"username\"\r\n            value={registerFields.username}\r\n            onChange={handleFormFields}\r\n          />\r\n        </label>\r\n        <label className=\"register-form-label\">\r\n          <span className=\"label-text\">Password</span>\r\n          <input\r\n            className=\"register-form__password\"\r\n            type=\"password\"\r\n            name=\"password\"\r\n            value={registerFields.password}\r\n            onChange={handleFormFields}\r\n          />\r\n        </label>\r\n        <label className=\"register-form-label\">\r\n          <span className=\"label-text\">Confirm Password</span>\r\n          <input\r\n            className=\"register-form__confirm-password\"\r\n            type=\"password\"\r\n            name=\"confirmPassword\"\r\n            value={registerFields.confirmPassword}\r\n            onChange={handleFormFields}\r\n          />\r\n        </label>\r\n        <input\r\n          className=\"register-form__submit\"\r\n          type=\"submit\"\r\n          value=\"Register\"\r\n        />\r\n      </form>\r\n\r\n      <div className=\"register-links\">\r\n        <div className=\"register-signin\">\r\n          <p className=\"register-signin__message\">Already Have An Account?</p>\r\n          <Link to=\"/login\" className=\"register-signin__link\">\r\n            Sign In\r\n          </Link>\r\n        </div>\r\n        <Link to=\"/\" className=\"register-links__guest\">\r\n          Guest\r\n        </Link>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Register;\r\n"]},"metadata":{},"sourceType":"module"}