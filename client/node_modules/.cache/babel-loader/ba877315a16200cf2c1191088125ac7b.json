{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\John\\\\Desktop\\\\Web Dev\\\\watch-list\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"C:\\\\Users\\\\John\\\\Desktop\\\\Web Dev\\\\watch-list\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport { useState, useEffect } from 'react';\n\nconst useForm = () => {\n  const _useState = useState({\n    username: {\n      value: \"\",\n      errors: []\n    },\n    password: {\n      value: \"\",\n      errors: []\n    },\n    confirmPassword: {\n      value: \"\",\n      errors: []\n    }\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        formFields = _useState2[0],\n        setFormFields = _useState2[1];\n\n  const _useState3 = useState({\n    username: [],\n    password: [],\n    confirmPassword: []\n  }),\n        _useState4 = _slicedToArray(_useState3, 2),\n        formErrors = _useState4[0],\n        setFormErrors = _useState4[1];\n\n  const _useState5 = useState(false),\n        _useState6 = _slicedToArray(_useState5, 2),\n        errorFound = _useState6[0],\n        setErrorFound = _useState6[1];\n\n  const _useState7 = useState(true),\n        _useState8 = _slicedToArray(_useState7, 2),\n        passwordMatch = _useState8[0],\n        setPasswordMatch = _useState8[1];\n\n  useEffect(() => {});\n\n  const updateFormFields = field => {\n    const fieldName = field.target.name;\n    const fieldValue = field.target.value;\n    checkInputErrors(fieldName, fieldValue);\n    setFormFields(_objectSpread({}, formFields, {\n      [fieldName]: fieldValue\n    }));\n  };\n\n  const checkInputErrors = (fieldName, fieldValue) => {\n    switch (fieldName) {\n      case 'username':\n        {\n          const errors = [];\n\n          if (fieldValue.includes(' ')) {\n            errors.push('Username cannot contain spaces');\n          }\n\n          if (fieldValue.length < 1) {\n            errors.push('Username is required');\n          }\n\n          setFormErrors(_objectSpread({}, formErrors, {\n            [fieldName]: errors\n          }));\n          break;\n        }\n\n      case 'password':\n        {\n          const errors = [];\n\n          if (fieldValue.includes(' ')) {\n            errors.push('Password cannot contain spaces');\n          }\n\n          if (fieldValue.length < 6) {\n            errors.push('Password must contain at least 6 characters');\n          }\n\n          if (!passwordMatch) {\n            setFormErrors(_objectSpread({}, formErrors, {\n              [fieldName]: errors,\n              confirmPassword: ['Passwords do not match']\n            }));\n            break;\n          } else {\n            setFormErrors(_objectSpread({}, formErrors, {\n              [fieldName]: errors,\n              confirmPassword: []\n            }));\n            break;\n          }\n        }\n\n      case 'confirmPassword':\n        {\n          if (!passwordMatch) {\n            setFormErrors(_objectSpread({}, formErrors, {\n              [fieldName]: ['Passwords do not match']\n            }));\n          } else {\n            setFormErrors(_objectSpread({}, formErrors, {\n              [fieldName]: []\n            }));\n          }\n        }\n    }\n  };\n\n  return {\n    updateFormFields,\n    formFields,\n    formErrors,\n    errorFound\n  };\n};\n\nexport default useForm;","map":{"version":3,"sources":["C:\\Users\\John\\Desktop\\Web Dev\\watch-list\\client\\src\\hooks\\useForm.js"],"names":["useState","useEffect","useForm","username","value","errors","password","confirmPassword","formFields","setFormFields","formErrors","setFormErrors","errorFound","setErrorFound","passwordMatch","setPasswordMatch","updateFormFields","field","fieldName","target","name","fieldValue","checkInputErrors","includes","push","length"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react';\r\n\r\nconst useForm = () => {\r\n  const [formFields, setFormFields] = useState({\r\n    username:{value:\"\", errors: []},\r\n    password:{value:\"\", errors:[]},\r\n    confirmPassword:{value:\"\", errors:[]}\r\n  });\r\n\r\n  const [formErrors, setFormErrors] = useState({\r\n    username: [],\r\n    password: [],\r\n    confirmPassword: []\r\n  });\r\n\r\n  const [errorFound, setErrorFound] = useState(false);\r\n\r\n  const [passwordMatch, setPasswordMatch] = useState(true);\r\n\r\n  useEffect(() => {\r\n    \r\n  });\r\n\r\n  const updateFormFields = field => {\r\n    const fieldName = field.target.name;\r\n    const fieldValue = field.target.value;\r\n\r\n    checkInputErrors(fieldName, fieldValue);\r\n\r\n    setFormFields({ ...formFields, [fieldName]: fieldValue });\r\n  };\r\n\r\n  const checkInputErrors = (fieldName, fieldValue) => {\r\n    switch (fieldName) {\r\n      case 'username': {\r\n        const errors = [];\r\n        if (fieldValue.includes(' ')) {\r\n          errors.push('Username cannot contain spaces');\r\n        }\r\n\r\n        if (fieldValue.length < 1) {\r\n          errors.push('Username is required');\r\n        }\r\n\r\n        setFormErrors({ ...formErrors, [fieldName]: errors });\r\n        break;\r\n      }\r\n\r\n      case 'password': {\r\n        const errors = [];\r\n        if (fieldValue.includes(' ')) {\r\n          errors.push('Password cannot contain spaces');\r\n        }\r\n\r\n        if (fieldValue.length < 6) {\r\n          errors.push('Password must contain at least 6 characters');\r\n        }\r\n\r\n        if (!passwordMatch) {\r\n          setFormErrors({\r\n            ...formErrors,\r\n            [fieldName]: errors,\r\n            confirmPassword: ['Passwords do not match']\r\n          });\r\n          break;\r\n        } else {\r\n          setFormErrors({\r\n            ...formErrors,\r\n            [fieldName]: errors,\r\n            confirmPassword: []\r\n          });\r\n          break;\r\n        }\r\n      }\r\n\r\n      case 'confirmPassword': {\r\n        if (!passwordMatch) {\r\n          setFormErrors({\r\n            ...formErrors,\r\n            [fieldName]: ['Passwords do not match']\r\n          });\r\n        } else {\r\n          setFormErrors({\r\n            ...formErrors,\r\n            [fieldName]: []\r\n          });\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  return { updateFormFields, formFields, formErrors, errorFound };\r\n};\r\n\r\nexport default useForm;\r\n"]},"metadata":{},"sourceType":"module"}