{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\John\\\\Desktop\\\\Web Dev\\\\watch-list\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"C:\\\\Users\\\\John\\\\Desktop\\\\Web Dev\\\\watch-list\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport { useState, useEffect } from 'react';\n\nconst useForm = formValidator => {\n  const _useState = useState({\n    username: {\n      value: '',\n      errors: []\n    },\n    password: {\n      value: '',\n      errors: []\n    },\n    confirmPassword: {\n      value: '',\n      errors: []\n    }\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        formFields = _useState2[0],\n        setFormFields = _useState2[1];\n\n  const _useState3 = useState(true),\n        _useState4 = _slicedToArray(_useState3, 2),\n        formStatus = _useState4[0],\n        setFormStatus = _useState4[1]; // useEffect(() => {\n  //   let submitDisabled = true;\n  //   let fieldCount = 0;\n  //   for (const field in formFields) {\n  //     if (formFields[field].value && formFields[field].errors.length < 1) {\n  //       fieldCount++;\n  //       submitDisabled = false;\n  //     }\n  //   }\n  //   if (fieldCount === 3) {\n  //     setFormStatus(submitDisabled);\n  //   } else {\n  //     setFormStatus(true);\n  //   }\n  // }, [formFields]);\n  // const validateForm = (fieldName, fieldValue) => {\n  //   switch (fieldName) {\n  //     case 'username': {\n  //       const errors = [];\n  //       if (fieldValue.includes(' ')) {\n  //         errors.push('Username cannot contain spaces');\n  //       }\n  //       if (fieldValue.length < 1) {\n  //         errors.push('Username is required');\n  //       }\n  //       setFormFields({\n  //         ...formFields,\n  //         [fieldName]: { value: fieldValue, errors }\n  //       });\n  //       break;\n  //     }\n  //     case 'password': {\n  //       const errors = [];\n  //       const passwordField = fieldValue;\n  //       const confirmPasswordField = formFields.confirmPassword.value;\n  //       if (fieldValue.includes(' ')) {\n  //         errors.push('Password cannot contain spaces');\n  //       }\n  //       if (fieldValue.length < 6) {\n  //         errors.push('Password must contain at least 6 characters');\n  //       }\n  //       if (\n  //         passwordField !== confirmPasswordField &&\n  //         confirmPasswordField !== ''\n  //       ) {\n  //         setFormFields({\n  //           ...formFields,\n  //           [fieldName]: { value: fieldValue, errors },\n  //           confirmPassword: {\n  //             ...formFields.confirmPassword,\n  //             errors: ['Passwords do not match']\n  //           }\n  //         });\n  //         break;\n  //       } else {\n  //         setFormFields({\n  //           ...formFields,\n  //           [fieldName]: { value: fieldValue, errors },\n  //           confirmPassword: {\n  //             ...formFields.confirmPassword,\n  //             errors: []\n  //           }\n  //         });\n  //         break;\n  //       }\n  //     }\n  //     case 'confirmPassword': {\n  //       const passwordField = formFields.password.value;\n  //       const confirmPasswordField = fieldValue;\n  //       if (passwordField !== confirmPasswordField) {\n  //         setFormFields({\n  //           ...formFields,\n  //           [fieldName]: {\n  //             value: fieldValue,\n  //             errors: ['Passwords do not match']\n  //           }\n  //         });\n  //       } else {\n  //         setFormFields({\n  //           ...formFields,\n  //           [fieldName]: { value: fieldValue, errors: [] }\n  //         });\n  //       }\n  //     }\n  //   }\n  // };\n\n\n  const updateFormFields = field => {\n    const fieldName = field.target.name;\n    const fieldValue = field.target.value;\n\n    if (formValidator) {\n      formValidator(fieldName, fieldValue, formFields, setFormFields);\n    } else {\n      switch (fieldName) {\n        case 'username':\n          {\n            setFormFields(_objectSpread({}, formFields, {\n              [fieldName]: _objectSpread({}, formFields[fieldName], {\n                value: fieldValue\n              })\n            }));\n            break;\n          }\n\n        case 'password':\n          {\n            setFormFields(_objectSpread({}, formFields, {\n              [fieldName]: _objectSpread({}, formFields[fieldName], {\n                value: fieldValue\n              })\n            }));\n            break;\n          }\n\n        case 'confirmPassword':\n          {\n            setFormFields(_objectSpread({}, formFields, {\n              [fieldName]: _objectSpread({}, formFields[fieldName], {\n                value: fieldValue\n              })\n            }));\n          }\n      }\n    }\n  };\n\n  return {\n    updateFormFields,\n    formFields,\n    formStatus\n  };\n};\n\nexport default useForm;","map":{"version":3,"sources":["C:\\Users\\John\\Desktop\\Web Dev\\watch-list\\client\\src\\hooks\\useForm.js"],"names":["useState","useEffect","useForm","formValidator","username","value","errors","password","confirmPassword","formFields","setFormFields","formStatus","setFormStatus","updateFormFields","field","fieldName","target","name","fieldValue"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;AAEA,MAAMC,OAAO,GAAGC,aAAa,IAAI;AAAA,oBACKH,QAAQ,CAAC;AAC3CI,IAAAA,QAAQ,EAAE;AAAEC,MAAAA,KAAK,EAAE,EAAT;AAAaC,MAAAA,MAAM,EAAE;AAArB,KADiC;AAE3CC,IAAAA,QAAQ,EAAE;AAAEF,MAAAA,KAAK,EAAE,EAAT;AAAaC,MAAAA,MAAM,EAAE;AAArB,KAFiC;AAG3CE,IAAAA,eAAe,EAAE;AAAEH,MAAAA,KAAK,EAAE,EAAT;AAAaC,MAAAA,MAAM,EAAE;AAArB;AAH0B,GAAD,CADb;AAAA;AAAA,QACxBG,UADwB;AAAA,QACZC,aADY;;AAAA,qBAOKV,QAAQ,CAAC,IAAD,CAPb;AAAA;AAAA,QAOxBW,UAPwB;AAAA,QAOZC,aAPY,kBAS/B;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,QAAMC,gBAAgB,GAAGC,KAAK,IAAI;AAChC,UAAMC,SAAS,GAAGD,KAAK,CAACE,MAAN,CAAaC,IAA/B;AACA,UAAMC,UAAU,GAAGJ,KAAK,CAACE,MAAN,CAAaX,KAAhC;;AAEA,QAAIF,aAAJ,EAAmB;AACjBA,MAAAA,aAAa,CAACY,SAAD,EAAYG,UAAZ,EAAwBT,UAAxB,EAAoCC,aAApC,CAAb;AACD,KAFD,MAEO;AACL,cAAQK,SAAR;AACE,aAAK,UAAL;AAAiB;AACfL,YAAAA,aAAa,mBACRD,UADQ;AAEX,eAACM,SAAD,qBAAkBN,UAAU,CAACM,SAAD,CAA5B;AAAyCV,gBAAAA,KAAK,EAAEa;AAAhD;AAFW,eAAb;AAIA;AACD;;AAED,aAAK,UAAL;AAAiB;AACfR,YAAAA,aAAa,mBACRD,UADQ;AAEX,eAACM,SAAD,qBAAkBN,UAAU,CAACM,SAAD,CAA5B;AAAyCV,gBAAAA,KAAK,EAAEa;AAAhD;AAFW,eAAb;AAIA;AACD;;AAED,aAAK,iBAAL;AAAwB;AACtBR,YAAAA,aAAa,mBACRD,UADQ;AAEX,eAACM,SAAD,qBAAkBN,UAAU,CAACM,SAAD,CAA5B;AAAyCV,gBAAAA,KAAK,EAAEa;AAAhD;AAFW,eAAb;AAID;AAtBH;AAwBD;AACF,GAhCD;;AAkCA,SAAO;AAAEL,IAAAA,gBAAF;AAAoBJ,IAAAA,UAApB;AAAgCE,IAAAA;AAAhC,GAAP;AACD,CA5ID;;AA8IA,eAAeT,OAAf","sourcesContent":["import { useState, useEffect } from 'react';\r\n\r\nconst useForm = formValidator => {\r\n  const [formFields, setFormFields] = useState({\r\n    username: { value: '', errors: [] },\r\n    password: { value: '', errors: [] },\r\n    confirmPassword: { value: '', errors: [] }\r\n  });\r\n\r\n  const [formStatus, setFormStatus] = useState(true);\r\n\r\n  // useEffect(() => {\r\n  //   let submitDisabled = true;\r\n  //   let fieldCount = 0;\r\n\r\n  //   for (const field in formFields) {\r\n  //     if (formFields[field].value && formFields[field].errors.length < 1) {\r\n  //       fieldCount++;\r\n  //       submitDisabled = false;\r\n  //     }\r\n  //   }\r\n\r\n  //   if (fieldCount === 3) {\r\n  //     setFormStatus(submitDisabled);\r\n  //   } else {\r\n  //     setFormStatus(true);\r\n  //   }\r\n  // }, [formFields]);\r\n\r\n  // const validateForm = (fieldName, fieldValue) => {\r\n  //   switch (fieldName) {\r\n  //     case 'username': {\r\n  //       const errors = [];\r\n  //       if (fieldValue.includes(' ')) {\r\n  //         errors.push('Username cannot contain spaces');\r\n  //       }\r\n\r\n  //       if (fieldValue.length < 1) {\r\n  //         errors.push('Username is required');\r\n  //       }\r\n\r\n  //       setFormFields({\r\n  //         ...formFields,\r\n  //         [fieldName]: { value: fieldValue, errors }\r\n  //       });\r\n  //       break;\r\n  //     }\r\n\r\n  //     case 'password': {\r\n  //       const errors = [];\r\n  //       const passwordField = fieldValue;\r\n  //       const confirmPasswordField = formFields.confirmPassword.value;\r\n  //       if (fieldValue.includes(' ')) {\r\n  //         errors.push('Password cannot contain spaces');\r\n  //       }\r\n\r\n  //       if (fieldValue.length < 6) {\r\n  //         errors.push('Password must contain at least 6 characters');\r\n  //       }\r\n\r\n  //       if (\r\n  //         passwordField !== confirmPasswordField &&\r\n  //         confirmPasswordField !== ''\r\n  //       ) {\r\n  //         setFormFields({\r\n  //           ...formFields,\r\n  //           [fieldName]: { value: fieldValue, errors },\r\n  //           confirmPassword: {\r\n  //             ...formFields.confirmPassword,\r\n  //             errors: ['Passwords do not match']\r\n  //           }\r\n  //         });\r\n  //         break;\r\n  //       } else {\r\n  //         setFormFields({\r\n  //           ...formFields,\r\n  //           [fieldName]: { value: fieldValue, errors },\r\n  //           confirmPassword: {\r\n  //             ...formFields.confirmPassword,\r\n  //             errors: []\r\n  //           }\r\n  //         });\r\n  //         break;\r\n  //       }\r\n  //     }\r\n\r\n  //     case 'confirmPassword': {\r\n  //       const passwordField = formFields.password.value;\r\n  //       const confirmPasswordField = fieldValue;\r\n  //       if (passwordField !== confirmPasswordField) {\r\n  //         setFormFields({\r\n  //           ...formFields,\r\n  //           [fieldName]: {\r\n  //             value: fieldValue,\r\n  //             errors: ['Passwords do not match']\r\n  //           }\r\n  //         });\r\n  //       } else {\r\n  //         setFormFields({\r\n  //           ...formFields,\r\n  //           [fieldName]: { value: fieldValue, errors: [] }\r\n  //         });\r\n  //       }\r\n  //     }\r\n  //   }\r\n  // };\r\n\r\n  const updateFormFields = field => {\r\n    const fieldName = field.target.name;\r\n    const fieldValue = field.target.value;\r\n\r\n    if (formValidator) {\r\n      formValidator(fieldName, fieldValue, formFields, setFormFields);\r\n    } else {\r\n      switch (fieldName) {\r\n        case 'username': {\r\n          setFormFields({\r\n            ...formFields,\r\n            [fieldName]: { ...formFields[fieldName], value: fieldValue }\r\n          });\r\n          break;\r\n        }\r\n\r\n        case 'password': {\r\n          setFormFields({\r\n            ...formFields,\r\n            [fieldName]: { ...formFields[fieldName], value: fieldValue }\r\n          });\r\n          break;\r\n        }\r\n\r\n        case 'confirmPassword': {\r\n          setFormFields({\r\n            ...formFields,\r\n            [fieldName]: { ...formFields[fieldName], value: fieldValue }\r\n          });\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  return { updateFormFields, formFields, formStatus };\r\n};\r\n\r\nexport default useForm;\r\n"]},"metadata":{},"sourceType":"module"}