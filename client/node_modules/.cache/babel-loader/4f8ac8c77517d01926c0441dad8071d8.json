{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\John\\\\Desktop\\\\Web Dev\\\\watch-list\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"C:\\\\Users\\\\John\\\\Desktop\\\\Web Dev\\\\watch-list\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport { useState, useEffect } from 'react';\n\nconst useForm = () => {\n  const _useState = useState({\n    username: {\n      value: '',\n      errors: []\n    },\n    password: {\n      value: '',\n      errors: []\n    },\n    confirmPassword: {\n      value: '',\n      errors: []\n    }\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        formFields = _useState2[0],\n        setFormFields = _useState2[1];\n\n  const _useState3 = useState(false),\n        _useState4 = _slicedToArray(_useState3, 2),\n        validForm = _useState4[0],\n        setValidForm = _useState4[1];\n\n  useEffect(() => {\n    let status = false;\n\n    for (const field in formFields) {\n      if (formFields[field].value && formFields[field].errors.length > 0) {\n        status = true;\n      } else {\n        status = false;\n      }\n    }\n\n    setValidForm(status);\n  });\n\n  const checkInputErrors = (fieldName, fieldValue) => {\n    switch (fieldName) {\n      case 'username':\n        {\n          const errors = [];\n\n          if (fieldValue.includes(' ')) {\n            errors.push('Username cannot contain spaces');\n          }\n\n          if (fieldValue.length < 1) {\n            errors.push('Username is required');\n          }\n\n          setFormFields(_objectSpread({}, formFields, {\n            [fieldName]: {\n              value: fieldValue,\n              errors\n            }\n          }));\n          break;\n        }\n\n      case 'password':\n        {\n          const errors = [];\n          const passwordField = fieldValue;\n          const confirmPasswordField = formFields.confirmPassword.value;\n\n          if (fieldValue.includes(' ')) {\n            errors.push('Password cannot contain spaces');\n          }\n\n          if (fieldValue.length < 6) {\n            errors.push('Password must contain at least 6 characters');\n          }\n\n          if (passwordField !== confirmPasswordField && confirmPasswordField !== '') {\n            setFormFields(_objectSpread({}, formFields, {\n              [fieldName]: {\n                value: fieldValue,\n                errors\n              },\n              confirmPassword: _objectSpread({}, formFields.confirmPassword, {\n                errors: ['Passwords do not match']\n              })\n            }));\n            break;\n          } else {\n            setFormFields(_objectSpread({}, formFields, {\n              [fieldName]: {\n                value: fieldValue,\n                errors\n              },\n              confirmPassword: _objectSpread({}, formFields.confirmPassword, {\n                errors: []\n              })\n            }));\n            break;\n          }\n        }\n\n      case 'confirmPassword':\n        {\n          const passwordField = formFields.password.value;\n          const confirmPasswordField = fieldValue;\n\n          if (passwordField !== confirmPasswordField) {\n            setFormFields(_objectSpread({}, formFields, {\n              [fieldName]: {\n                value: fieldValue,\n                errors: ['Passwords do not match']\n              }\n            }));\n          } else {\n            setFormFields(_objectSpread({}, formFields, {\n              [fieldName]: {\n                value: fieldValue,\n                errors: []\n              }\n            }));\n          }\n        }\n    }\n  };\n\n  const updateFormFields = field => {\n    const fieldName = field.target.name;\n    const fieldValue = field.target.value;\n    checkInputErrors(fieldName, fieldValue);\n  };\n\n  return {\n    updateFormFields,\n    formFields,\n    validForm\n  };\n};\n\nexport default useForm;","map":{"version":3,"sources":["C:\\Users\\John\\Desktop\\Web Dev\\watch-list\\client\\src\\hooks\\useForm.js"],"names":["useState","useEffect","useForm","username","value","errors","password","confirmPassword","formFields","setFormFields","validForm","setValidForm","status","field","length","checkInputErrors","fieldName","fieldValue","includes","push","passwordField","confirmPasswordField","updateFormFields","target","name"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react';\r\n\r\nconst useForm = () => {\r\n  const [formFields, setFormFields] = useState({\r\n    username: { value: '', errors: [] },\r\n    password: { value: '', errors: [] },\r\n    confirmPassword: { value: '', errors: [] }\r\n  });\r\n\r\n  const [validForm, setValidForm] = useState(false);\r\n\r\n  useEffect(() => {\r\n    let status = false;\r\n\r\n    for (const field in formFields) {\r\n      if (formFields[field].value && formFields[field].errors.length > 0) {\r\n        status = true;\r\n      } else {\r\n        status = false;\r\n      }\r\n    }\r\n\r\n    setValidForm(status)\r\n  });\r\n\r\n  const checkInputErrors = (fieldName, fieldValue) => {\r\n    switch (fieldName) {\r\n      case 'username': {\r\n        const errors = [];\r\n        if (fieldValue.includes(' ')) {\r\n          errors.push('Username cannot contain spaces');\r\n        }\r\n\r\n        if (fieldValue.length < 1) {\r\n          errors.push('Username is required');\r\n        }\r\n\r\n        setFormFields({\r\n          ...formFields,\r\n          [fieldName]: { value: fieldValue, errors }\r\n        });\r\n        break;\r\n      }\r\n\r\n      case 'password': {\r\n        const errors = [];\r\n        const passwordField = fieldValue;\r\n        const confirmPasswordField = formFields.confirmPassword.value;\r\n        if (fieldValue.includes(' ')) {\r\n          errors.push('Password cannot contain spaces');\r\n        }\r\n\r\n        if (fieldValue.length < 6) {\r\n          errors.push('Password must contain at least 6 characters');\r\n        }\r\n\r\n        if (\r\n          passwordField !== confirmPasswordField &&\r\n          confirmPasswordField !== ''\r\n        ) {\r\n          setFormFields({\r\n            ...formFields,\r\n            [fieldName]: { value: fieldValue, errors },\r\n            confirmPassword: {\r\n              ...formFields.confirmPassword,\r\n              errors: ['Passwords do not match']\r\n            }\r\n          });\r\n          break;\r\n        } else {\r\n          setFormFields({\r\n            ...formFields,\r\n            [fieldName]: { value: fieldValue, errors },\r\n            confirmPassword: {\r\n              ...formFields.confirmPassword,\r\n              errors: []\r\n            }\r\n          });\r\n          break;\r\n        }\r\n      }\r\n\r\n      case 'confirmPassword': {\r\n        const passwordField = formFields.password.value;\r\n        const confirmPasswordField = fieldValue;\r\n        if (passwordField !== confirmPasswordField) {\r\n          setFormFields({\r\n            ...formFields,\r\n            [fieldName]: {\r\n              value: fieldValue,\r\n              errors: ['Passwords do not match']\r\n            }\r\n          });\r\n        } else {\r\n          setFormFields({\r\n            ...formFields,\r\n            [fieldName]: { value: fieldValue, errors: [] }\r\n          });\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  const updateFormFields = field => {\r\n    const fieldName = field.target.name;\r\n    const fieldValue = field.target.value;\r\n\r\n    checkInputErrors(fieldName, fieldValue);\r\n  };\r\n\r\n  return { updateFormFields, formFields, validForm };\r\n};\r\n\r\nexport default useForm;\r\n"]},"metadata":{},"sourceType":"module"}