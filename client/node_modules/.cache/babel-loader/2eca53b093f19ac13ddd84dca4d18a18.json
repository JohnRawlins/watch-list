{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\John\\\\Desktop\\\\Web Dev\\\\watch-list\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"C:\\\\Users\\\\John\\\\Desktop\\\\Web Dev\\\\watch-list\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport { useState, useEffect } from 'react';\n\nconst useForm = () => {\n  const _useState = useState({\n    type: '',\n    username: '',\n    password: '',\n    confirmPassword: ''\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        formFields = _useState2[0],\n        setFormFields = _useState2[1];\n\n  const _useState3 = useState({\n    username: [],\n    password: [],\n    confirmPassword: []\n  }),\n        _useState4 = _slicedToArray(_useState3, 2),\n        formErrors = _useState4[0],\n        setFormErrors = _useState4[1];\n\n  useEffect(() => {\n    let errorFound = true;\n\n    for (const field in formErrors) {\n      if (formErrors[field].length > 0) {\n        errorFound = false;\n      }\n    }\n\n    setErrorFound(errorFound);\n  }, [formErrors, formFields]);\n\n  const _useState5 = useState(false),\n        _useState6 = _slicedToArray(_useState5, 2),\n        errorFound = _useState6[0],\n        setErrorFound = _useState6[1];\n\n  let passwordMatchError = false;\n\n  const updateFormFields = (field, confirmPasswordElem, passwordElem) => {\n    const fieldName = field.target.name;\n    const fieldValue = field.target.value;\n\n    if (confirmPasswordElem && passwordElem && confirmPasswordElem.current.value !== passwordElem.current.value) {\n      passwordMatchError = true;\n    }\n\n    checkInputErrors(fieldName, fieldValue);\n    setFormFields(_objectSpread({}, formFields, {\n      [fieldName]: fieldValue\n    }));\n  };\n\n  const checkInputErrors = (fieldName, fieldValue) => {\n    switch (fieldName) {\n      case 'username':\n        {\n          const errors = [];\n\n          if (fieldValue.includes(' ')) {\n            errors.push('Username cannot contain spaces');\n          }\n\n          if (fieldValue.length < 1) {\n            errors.push('Username is required');\n          }\n\n          setFormErrors(_objectSpread({}, formErrors, {\n            [fieldName]: errors\n          }));\n          break;\n        }\n\n      case 'password':\n        {\n          const errors = [];\n\n          if (fieldValue.includes(' ')) {\n            errors.push('Password cannot contain spaces');\n          }\n\n          if (fieldValue.length < 6) {\n            errors.push('Password must contain at least 6 characters');\n          }\n\n          if (passwordMatchError) {\n            setFormErrors(_objectSpread({}, formErrors, {\n              [fieldName]: errors,\n              confirmPassword: ['Passwords do not match']\n            }));\n            break;\n          } else {\n            setFormErrors(_objectSpread({}, formErrors, {\n              [fieldName]: errors,\n              confirmPassword: []\n            }));\n            break;\n          }\n        }\n\n      case 'confirmPassword':\n        {\n          if (passwordMatchError) {\n            setFormErrors(_objectSpread({}, formErrors, {\n              [fieldName]: ['Passwords do not match']\n            }));\n          } else {\n            setFormErrors(_objectSpread({}, formErrors, {\n              [fieldName]: []\n            }));\n          }\n        }\n    }\n  };\n\n  return {\n    updateFormFields,\n    formFields,\n    formErrors,\n    errorFound\n  };\n};\n\nexport default useForm;","map":{"version":3,"sources":["C:\\Users\\John\\Desktop\\Web Dev\\watch-list\\client\\src\\hooks\\useForm.js"],"names":["useState","useEffect","useForm","type","username","password","confirmPassword","formFields","setFormFields","formErrors","setFormErrors","errorFound","field","length","setErrorFound","passwordMatchError","updateFormFields","confirmPasswordElem","passwordElem","fieldName","target","name","fieldValue","value","current","checkInputErrors","errors","includes","push"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;AAEA,MAAMC,OAAO,GAAG,MAAM;AAAA,oBACgBF,QAAQ,CAAC;AAC3CG,IAAAA,IAAI,EAAE,EADqC;AAE3CC,IAAAA,QAAQ,EAAE,EAFiC;AAG3CC,IAAAA,QAAQ,EAAE,EAHiC;AAI3CC,IAAAA,eAAe,EAAE;AAJ0B,GAAD,CADxB;AAAA;AAAA,QACbC,UADa;AAAA,QACDC,aADC;;AAAA,qBAQgBR,QAAQ,CAAC;AAC3CI,IAAAA,QAAQ,EAAE,EADiC;AAE3CC,IAAAA,QAAQ,EAAE,EAFiC;AAG3CC,IAAAA,eAAe,EAAE;AAH0B,GAAD,CARxB;AAAA;AAAA,QAQbG,UARa;AAAA,QAQDC,aARC;;AAcpBT,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIU,UAAU,GAAG,IAAjB;;AAEA,SAAK,MAAMC,KAAX,IAAoBH,UAApB,EAAgC;AAC9B,UAAIA,UAAU,CAACG,KAAD,CAAV,CAAkBC,MAAlB,GAA2B,CAA/B,EAAkC;AAChCF,QAAAA,UAAU,GAAG,KAAb;AACD;AACF;;AAEDG,IAAAA,aAAa,CAACH,UAAD,CAAb;AACD,GAVQ,EAUN,CAACF,UAAD,EAAaF,UAAb,CAVM,CAAT;;AAdoB,qBA0BgBP,QAAQ,CAAC,KAAD,CA1BxB;AAAA;AAAA,QA0BbW,UA1Ba;AAAA,QA0BDG,aA1BC;;AA4BpB,MAAIC,kBAAkB,GAAG,KAAzB;;AAEA,QAAMC,gBAAgB,GAAG,CAACJ,KAAD,EAAQK,mBAAR,EAA6BC,YAA7B,KAA8C;AACrE,UAAMC,SAAS,GAAGP,KAAK,CAACQ,MAAN,CAAaC,IAA/B;AACA,UAAMC,UAAU,GAAGV,KAAK,CAACQ,MAAN,CAAaG,KAAhC;;AAEA,QACEN,mBAAmB,IACnBC,YADA,IAEAD,mBAAmB,CAACO,OAApB,CAA4BD,KAA5B,KAAsCL,YAAY,CAACM,OAAb,CAAqBD,KAH7D,EAIE;AACAR,MAAAA,kBAAkB,GAAG,IAArB;AACD;;AAEDU,IAAAA,gBAAgB,CAACN,SAAD,EAAYG,UAAZ,CAAhB;AAEAd,IAAAA,aAAa,mBAAMD,UAAN;AAAkB,OAACY,SAAD,GAAaG;AAA/B,OAAb;AACD,GAfD;;AAiBA,QAAMG,gBAAgB,GAAG,CAACN,SAAD,EAAYG,UAAZ,KAA2B;AAClD,YAAQH,SAAR;AACE,WAAK,UAAL;AAAiB;AACf,gBAAMO,MAAM,GAAG,EAAf;;AACA,cAAIJ,UAAU,CAACK,QAAX,CAAoB,GAApB,CAAJ,EAA8B;AAC5BD,YAAAA,MAAM,CAACE,IAAP,CAAY,gCAAZ;AACD;;AAED,cAAIN,UAAU,CAACT,MAAX,GAAoB,CAAxB,EAA2B;AACzBa,YAAAA,MAAM,CAACE,IAAP,CAAY,sBAAZ;AACD;;AAEDlB,UAAAA,aAAa,mBAAMD,UAAN;AAAkB,aAACU,SAAD,GAAaO;AAA/B,aAAb;AACA;AACD;;AAED,WAAK,UAAL;AAAiB;AACf,gBAAMA,MAAM,GAAG,EAAf;;AACA,cAAIJ,UAAU,CAACK,QAAX,CAAoB,GAApB,CAAJ,EAA8B;AAC5BD,YAAAA,MAAM,CAACE,IAAP,CAAY,gCAAZ;AACD;;AAED,cAAIN,UAAU,CAACT,MAAX,GAAoB,CAAxB,EAA2B;AACzBa,YAAAA,MAAM,CAACE,IAAP,CAAY,6CAAZ;AACD;;AAED,cAAIb,kBAAJ,EAAwB;AACtBL,YAAAA,aAAa,mBACRD,UADQ;AAEX,eAACU,SAAD,GAAaO,MAFF;AAGXpB,cAAAA,eAAe,EAAE,CAAC,wBAAD;AAHN,eAAb;AAKA;AACD,WAPD,MAOO;AACLI,YAAAA,aAAa,mBACRD,UADQ;AAEX,eAACU,SAAD,GAAaO,MAFF;AAGXpB,cAAAA,eAAe,EAAE;AAHN,eAAb;AAKA;AACD;AACF;;AAED,WAAK,iBAAL;AAAwB;AACtB,cAAIS,kBAAJ,EAAwB;AACtBL,YAAAA,aAAa,mBACRD,UADQ;AAEX,eAACU,SAAD,GAAa,CAAC,wBAAD;AAFF,eAAb;AAID,WALD,MAKO;AACLT,YAAAA,aAAa,mBACRD,UADQ;AAEX,eAACU,SAAD,GAAa;AAFF,eAAb;AAID;AACF;AAtDH;AAwDD,GAzDD;;AA2DA,SAAO;AAAEH,IAAAA,gBAAF;AAAoBT,IAAAA,UAApB;AAAgCE,IAAAA,UAAhC;AAA4CE,IAAAA;AAA5C,GAAP;AACD,CA3GD;;AA6GA,eAAeT,OAAf","sourcesContent":["import { useState, useEffect } from 'react';\r\n\r\nconst useForm = () => {\r\n  const [formFields, setFormFields] = useState({\r\n    type: '',\r\n    username: '',\r\n    password: '',\r\n    confirmPassword: ''\r\n  });\r\n\r\n  const [formErrors, setFormErrors] = useState({\r\n    username: [],\r\n    password: [],\r\n    confirmPassword: []\r\n  });\r\n\r\n  useEffect(() => {\r\n    let errorFound = true;\r\n\r\n    for (const field in formErrors) {\r\n      if (formErrors[field].length > 0) {\r\n        errorFound = false;\r\n      }\r\n    }\r\n\r\n    setErrorFound(errorFound);\r\n  }, [formErrors, formFields]);\r\n\r\n  const [errorFound, setErrorFound] = useState(false);\r\n\r\n  let passwordMatchError = false;\r\n\r\n  const updateFormFields = (field, confirmPasswordElem, passwordElem) => {\r\n    const fieldName = field.target.name;\r\n    const fieldValue = field.target.value;\r\n\r\n    if (\r\n      confirmPasswordElem &&\r\n      passwordElem &&\r\n      confirmPasswordElem.current.value !== passwordElem.current.value\r\n    ) {\r\n      passwordMatchError = true;\r\n    }\r\n\r\n    checkInputErrors(fieldName, fieldValue);\r\n\r\n    setFormFields({ ...formFields, [fieldName]: fieldValue });\r\n  };\r\n\r\n  const checkInputErrors = (fieldName, fieldValue) => {\r\n    switch (fieldName) {\r\n      case 'username': {\r\n        const errors = [];\r\n        if (fieldValue.includes(' ')) {\r\n          errors.push('Username cannot contain spaces');\r\n        }\r\n\r\n        if (fieldValue.length < 1) {\r\n          errors.push('Username is required');\r\n        }\r\n\r\n        setFormErrors({ ...formErrors, [fieldName]: errors });\r\n        break;\r\n      }\r\n\r\n      case 'password': {\r\n        const errors = [];\r\n        if (fieldValue.includes(' ')) {\r\n          errors.push('Password cannot contain spaces');\r\n        }\r\n\r\n        if (fieldValue.length < 6) {\r\n          errors.push('Password must contain at least 6 characters');\r\n        }\r\n\r\n        if (passwordMatchError) {\r\n          setFormErrors({\r\n            ...formErrors,\r\n            [fieldName]: errors,\r\n            confirmPassword: ['Passwords do not match']\r\n          });\r\n          break;\r\n        } else {\r\n          setFormErrors({\r\n            ...formErrors,\r\n            [fieldName]: errors,\r\n            confirmPassword: []\r\n          });\r\n          break;\r\n        }\r\n      }\r\n\r\n      case 'confirmPassword': {\r\n        if (passwordMatchError) {\r\n          setFormErrors({\r\n            ...formErrors,\r\n            [fieldName]: ['Passwords do not match']\r\n          });\r\n        } else {\r\n          setFormErrors({\r\n            ...formErrors,\r\n            [fieldName]: []\r\n          });\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  return { updateFormFields, formFields, formErrors, errorFound };\r\n};\r\n\r\nexport default useForm;\r\n"]},"metadata":{},"sourceType":"module"}