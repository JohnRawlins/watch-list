{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\John\\\\Desktop\\\\Web Dev\\\\watch-list\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"C:\\\\Users\\\\John\\\\Desktop\\\\Web Dev\\\\watch-list\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport { useState, useEffect } from 'react';\n\nconst useForm = formValidator => {\n  const _useState = useState({\n    username: {\n      value: '',\n      errors: []\n    },\n    password: {\n      value: '',\n      errors: []\n    },\n    confirmPassword: {\n      value: '',\n      errors: []\n    }\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        formFields = _useState2[0],\n        setFormFields = _useState2[1];\n\n  const _useState3 = useState(true),\n        _useState4 = _slicedToArray(_useState3, 2),\n        submitDisabled = _useState4[0],\n        setSubmitDisabled = _useState4[1];\n\n  useEffect(() => {\n    if (formValidator) {\n      let fieldCount = 0;\n\n      for (const field in formFields) {\n        if (formFields[field].value && formFields[field].errors.length < 1) {\n          fieldCount++;\n        }\n      }\n\n      if (fieldCount === 3) {\n        setSubmitDisabled(false);\n      } else {\n        setSubmitDisabled(true);\n        return;\n      }\n    }\n\n    setSubmitDisabled(false);\n  }, [formFields, formValidator]);\n\n  const updateFormFields = field => {\n    const fieldName = field.target.name;\n    const fieldValue = field.target.value;\n\n    if (formValidator) {\n      formValidator(fieldName, fieldValue, formFields, setFormFields);\n    } else {\n      switch (fieldName) {\n        case 'username':\n          {\n            setFormFields(_objectSpread({}, formFields, {\n              [fieldName]: _objectSpread({}, formFields[fieldName], {\n                value: fieldValue\n              })\n            }));\n            break;\n          }\n\n        case 'password':\n          {\n            setFormFields(_objectSpread({}, formFields, {\n              [fieldName]: _objectSpread({}, formFields[fieldName], {\n                value: fieldValue\n              })\n            }));\n            break;\n          }\n\n        case 'confirmPassword':\n          {\n            setFormFields(_objectSpread({}, formFields, {\n              [fieldName]: _objectSpread({}, formFields[fieldName], {\n                value: fieldValue\n              })\n            }));\n          }\n      }\n    }\n  };\n\n  return {\n    updateFormFields,\n    formFields,\n    submitDisabled\n  };\n};\n\nexport default useForm;","map":{"version":3,"sources":["C:\\Users\\John\\Desktop\\Web Dev\\watch-list\\client\\src\\hooks\\useForm.js"],"names":["useState","useEffect","useForm","formValidator","username","value","errors","password","confirmPassword","formFields","setFormFields","submitDisabled","setSubmitDisabled","fieldCount","field","length","updateFormFields","fieldName","target","name","fieldValue"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;AAEA,MAAMC,OAAO,GAAGC,aAAa,IAAI;AAAA,oBACKH,QAAQ,CAAC;AAC3CI,IAAAA,QAAQ,EAAE;AAAEC,MAAAA,KAAK,EAAE,EAAT;AAAaC,MAAAA,MAAM,EAAE;AAArB,KADiC;AAE3CC,IAAAA,QAAQ,EAAE;AAAEF,MAAAA,KAAK,EAAE,EAAT;AAAaC,MAAAA,MAAM,EAAE;AAArB,KAFiC;AAG3CE,IAAAA,eAAe,EAAE;AAAEH,MAAAA,KAAK,EAAE,EAAT;AAAaC,MAAAA,MAAM,EAAE;AAArB;AAH0B,GAAD,CADb;AAAA;AAAA,QACxBG,UADwB;AAAA,QACZC,aADY;;AAAA,qBAOaV,QAAQ,CAAC,IAAD,CAPrB;AAAA;AAAA,QAOxBW,cAPwB;AAAA,QAORC,iBAPQ;;AAS/BX,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIE,aAAJ,EAAmB;AACjB,UAAIU,UAAU,GAAG,CAAjB;;AAEA,WAAK,MAAMC,KAAX,IAAoBL,UAApB,EAAgC;AAC9B,YAAIA,UAAU,CAACK,KAAD,CAAV,CAAkBT,KAAlB,IAA2BI,UAAU,CAACK,KAAD,CAAV,CAAkBR,MAAlB,CAAyBS,MAAzB,GAAkC,CAAjE,EAAoE;AAClEF,UAAAA,UAAU;AACX;AACF;;AAED,UAAIA,UAAU,KAAK,CAAnB,EAAsB;AACpBD,QAAAA,iBAAiB,CAAC,KAAD,CAAjB;AACD,OAFD,MAEO;AACLA,QAAAA,iBAAiB,CAAC,IAAD,CAAjB;AACA;AACD;AACF;;AACDA,IAAAA,iBAAiB,CAAC,KAAD,CAAjB;AACD,GAlBQ,EAkBN,CAACH,UAAD,EAAaN,aAAb,CAlBM,CAAT;;AAoBA,QAAMa,gBAAgB,GAAGF,KAAK,IAAI;AAChC,UAAMG,SAAS,GAAGH,KAAK,CAACI,MAAN,CAAaC,IAA/B;AACA,UAAMC,UAAU,GAAGN,KAAK,CAACI,MAAN,CAAab,KAAhC;;AAEA,QAAIF,aAAJ,EAAmB;AACjBA,MAAAA,aAAa,CAACc,SAAD,EAAYG,UAAZ,EAAwBX,UAAxB,EAAoCC,aAApC,CAAb;AACD,KAFD,MAEO;AACL,cAAQO,SAAR;AACE,aAAK,UAAL;AAAiB;AACfP,YAAAA,aAAa,mBACRD,UADQ;AAEX,eAACQ,SAAD,qBAAkBR,UAAU,CAACQ,SAAD,CAA5B;AAAyCZ,gBAAAA,KAAK,EAAEe;AAAhD;AAFW,eAAb;AAIA;AACD;;AAED,aAAK,UAAL;AAAiB;AACfV,YAAAA,aAAa,mBACRD,UADQ;AAEX,eAACQ,SAAD,qBAAkBR,UAAU,CAACQ,SAAD,CAA5B;AAAyCZ,gBAAAA,KAAK,EAAEe;AAAhD;AAFW,eAAb;AAIA;AACD;;AAED,aAAK,iBAAL;AAAwB;AACtBV,YAAAA,aAAa,mBACRD,UADQ;AAEX,eAACQ,SAAD,qBAAkBR,UAAU,CAACQ,SAAD,CAA5B;AAAyCZ,gBAAAA,KAAK,EAAEe;AAAhD;AAFW,eAAb;AAID;AAtBH;AAwBD;AACF,GAhCD;;AAkCA,SAAO;AAAEJ,IAAAA,gBAAF;AAAoBP,IAAAA,UAApB;AAAgCE,IAAAA;AAAhC,GAAP;AACD,CAhED;;AAkEA,eAAeT,OAAf","sourcesContent":["import { useState, useEffect } from 'react';\r\n\r\nconst useForm = formValidator => {\r\n  const [formFields, setFormFields] = useState({\r\n    username: { value: '', errors: [] },\r\n    password: { value: '', errors: [] },\r\n    confirmPassword: { value: '', errors: [] }\r\n  });\r\n\r\n  const [submitDisabled, setSubmitDisabled] = useState(true);\r\n\r\n  useEffect(() => {\r\n    if (formValidator) {\r\n      let fieldCount = 0;\r\n\r\n      for (const field in formFields) {\r\n        if (formFields[field].value && formFields[field].errors.length < 1) {\r\n          fieldCount++;\r\n        }\r\n      }\r\n\r\n      if (fieldCount === 3) {\r\n        setSubmitDisabled(false);\r\n      } else {\r\n        setSubmitDisabled(true);\r\n        return;\r\n      }\r\n    }\r\n    setSubmitDisabled(false);\r\n  }, [formFields, formValidator]);\r\n\r\n  const updateFormFields = field => {\r\n    const fieldName = field.target.name;\r\n    const fieldValue = field.target.value;\r\n\r\n    if (formValidator) {\r\n      formValidator(fieldName, fieldValue, formFields, setFormFields);\r\n    } else {\r\n      switch (fieldName) {\r\n        case 'username': {\r\n          setFormFields({\r\n            ...formFields,\r\n            [fieldName]: { ...formFields[fieldName], value: fieldValue }\r\n          });\r\n          break;\r\n        }\r\n\r\n        case 'password': {\r\n          setFormFields({\r\n            ...formFields,\r\n            [fieldName]: { ...formFields[fieldName], value: fieldValue }\r\n          });\r\n          break;\r\n        }\r\n\r\n        case 'confirmPassword': {\r\n          setFormFields({\r\n            ...formFields,\r\n            [fieldName]: { ...formFields[fieldName], value: fieldValue }\r\n          });\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  return { updateFormFields, formFields, submitDisabled };\r\n};\r\n\r\nexport default useForm;\r\n"]},"metadata":{},"sourceType":"module"}