{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\John\\\\Desktop\\\\Web Dev\\\\watch-list\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\n\nconst validateForm = (fieldName, fieldValue, formFields, setFormFields) => {\n  switch (fieldName) {\n    case 'username':\n      {\n        const errors = [];\n\n        if (fieldValue.includes(' ')) {\n          errors.push('Username cannot contain spaces');\n        }\n\n        if (fieldValue.length < 1) {\n          errors.push('Username is required');\n        }\n\n        setFormFields(_objectSpread({}, formFields, {\n          [fieldName]: {\n            value: fieldValue,\n            errors\n          }\n        }));\n        break;\n      }\n\n    case 'password':\n      {\n        const errors = [];\n        const passwordField = fieldValue;\n        const confirmPasswordField = formFields.confirmPassword.value;\n\n        if (fieldValue.includes(' ')) {\n          errors.push('Password cannot contain spaces');\n        }\n\n        if (fieldValue.length < 6) {\n          errors.push('Password must contain at least 6 characters');\n        }\n\n        if (passwordField !== confirmPasswordField && confirmPasswordField !== '') {\n          setFormFields(_objectSpread({}, formFields, {\n            [fieldName]: {\n              value: fieldValue,\n              errors\n            },\n            confirmPassword: _objectSpread({}, formFields.confirmPassword, {\n              errors: ['Passwords do not match']\n            })\n          }));\n          break;\n        } else {\n          setFormFields(_objectSpread({}, formFields, {\n            [fieldName]: {\n              value: fieldValue,\n              errors\n            },\n            confirmPassword: _objectSpread({}, formFields.confirmPassword, {\n              errors: []\n            })\n          }));\n          break;\n        }\n      }\n\n    case 'confirmPassword':\n      {\n        const passwordField = formFields.password.value;\n        const confirmPasswordField = fieldValue;\n\n        if (passwordField !== confirmPasswordField) {\n          setFormFields(_objectSpread({}, formFields, {\n            [fieldName]: {\n              value: fieldValue,\n              errors: ['Passwords do not match']\n            }\n          }));\n        } else {\n          setFormFields(_objectSpread({}, formFields, {\n            [fieldName]: {\n              value: fieldValue,\n              errors: []\n            }\n          }));\n        }\n      }\n  }\n};","map":{"version":3,"sources":["C:\\Users\\John\\Desktop\\Web Dev\\watch-list\\client\\src\\hooks\\formValidator.js"],"names":["validateForm","fieldName","fieldValue","formFields","setFormFields","errors","includes","push","length","value","passwordField","confirmPasswordField","confirmPassword","password"],"mappings":";;AAAA,MAAMA,YAAY,GAAG,CAACC,SAAD,EAAYC,UAAZ,EAAwBC,UAAxB,EAAoCC,aAApC,KAAsD;AACzE,UAAQH,SAAR;AACE,SAAK,UAAL;AAAiB;AACf,cAAMI,MAAM,GAAG,EAAf;;AACA,YAAIH,UAAU,CAACI,QAAX,CAAoB,GAApB,CAAJ,EAA8B;AAC5BD,UAAAA,MAAM,CAACE,IAAP,CAAY,gCAAZ;AACD;;AAED,YAAIL,UAAU,CAACM,MAAX,GAAoB,CAAxB,EAA2B;AACzBH,UAAAA,MAAM,CAACE,IAAP,CAAY,sBAAZ;AACD;;AAEDH,QAAAA,aAAa,mBACRD,UADQ;AAEX,WAACF,SAAD,GAAa;AAAEQ,YAAAA,KAAK,EAAEP,UAAT;AAAqBG,YAAAA;AAArB;AAFF,WAAb;AAIA;AACD;;AAED,SAAK,UAAL;AAAiB;AACf,cAAMA,MAAM,GAAG,EAAf;AACA,cAAMK,aAAa,GAAGR,UAAtB;AACA,cAAMS,oBAAoB,GAAGR,UAAU,CAACS,eAAX,CAA2BH,KAAxD;;AACA,YAAIP,UAAU,CAACI,QAAX,CAAoB,GAApB,CAAJ,EAA8B;AAC5BD,UAAAA,MAAM,CAACE,IAAP,CAAY,gCAAZ;AACD;;AAED,YAAIL,UAAU,CAACM,MAAX,GAAoB,CAAxB,EAA2B;AACzBH,UAAAA,MAAM,CAACE,IAAP,CAAY,6CAAZ;AACD;;AAED,YACEG,aAAa,KAAKC,oBAAlB,IACAA,oBAAoB,KAAK,EAF3B,EAGE;AACAP,UAAAA,aAAa,mBACRD,UADQ;AAEX,aAACF,SAAD,GAAa;AAAEQ,cAAAA,KAAK,EAAEP,UAAT;AAAqBG,cAAAA;AAArB,aAFF;AAGXO,YAAAA,eAAe,oBACVT,UAAU,CAACS,eADD;AAEbP,cAAAA,MAAM,EAAE,CAAC,wBAAD;AAFK;AAHJ,aAAb;AAQA;AACD,SAbD,MAaO;AACLD,UAAAA,aAAa,mBACRD,UADQ;AAEX,aAACF,SAAD,GAAa;AAAEQ,cAAAA,KAAK,EAAEP,UAAT;AAAqBG,cAAAA;AAArB,aAFF;AAGXO,YAAAA,eAAe,oBACVT,UAAU,CAACS,eADD;AAEbP,cAAAA,MAAM,EAAE;AAFK;AAHJ,aAAb;AAQA;AACD;AACF;;AAED,SAAK,iBAAL;AAAwB;AACtB,cAAMK,aAAa,GAAGP,UAAU,CAACU,QAAX,CAAoBJ,KAA1C;AACA,cAAME,oBAAoB,GAAGT,UAA7B;;AACA,YAAIQ,aAAa,KAAKC,oBAAtB,EAA4C;AAC1CP,UAAAA,aAAa,mBACRD,UADQ;AAEX,aAACF,SAAD,GAAa;AACXQ,cAAAA,KAAK,EAAEP,UADI;AAEXG,cAAAA,MAAM,EAAE,CAAC,wBAAD;AAFG;AAFF,aAAb;AAOD,SARD,MAQO;AACLD,UAAAA,aAAa,mBACRD,UADQ;AAEX,aAACF,SAAD,GAAa;AAAEQ,cAAAA,KAAK,EAAEP,UAAT;AAAqBG,cAAAA,MAAM,EAAE;AAA7B;AAFF,aAAb;AAID;AACF;AAzEH;AA2ED,CA5ED","sourcesContent":["const validateForm = (fieldName, fieldValue, formFields, setFormFields) => {\r\n  switch (fieldName) {\r\n    case 'username': {\r\n      const errors = [];\r\n      if (fieldValue.includes(' ')) {\r\n        errors.push('Username cannot contain spaces');\r\n      }\r\n\r\n      if (fieldValue.length < 1) {\r\n        errors.push('Username is required');\r\n      }\r\n\r\n      setFormFields({\r\n        ...formFields,\r\n        [fieldName]: { value: fieldValue, errors }\r\n      });\r\n      break;\r\n    }\r\n\r\n    case 'password': {\r\n      const errors = [];\r\n      const passwordField = fieldValue;\r\n      const confirmPasswordField = formFields.confirmPassword.value;\r\n      if (fieldValue.includes(' ')) {\r\n        errors.push('Password cannot contain spaces');\r\n      }\r\n\r\n      if (fieldValue.length < 6) {\r\n        errors.push('Password must contain at least 6 characters');\r\n      }\r\n\r\n      if (\r\n        passwordField !== confirmPasswordField &&\r\n        confirmPasswordField !== ''\r\n      ) {\r\n        setFormFields({\r\n          ...formFields,\r\n          [fieldName]: { value: fieldValue, errors },\r\n          confirmPassword: {\r\n            ...formFields.confirmPassword,\r\n            errors: ['Passwords do not match']\r\n          }\r\n        });\r\n        break;\r\n      } else {\r\n        setFormFields({\r\n          ...formFields,\r\n          [fieldName]: { value: fieldValue, errors },\r\n          confirmPassword: {\r\n            ...formFields.confirmPassword,\r\n            errors: []\r\n          }\r\n        });\r\n        break;\r\n      }\r\n    }\r\n\r\n    case 'confirmPassword': {\r\n      const passwordField = formFields.password.value;\r\n      const confirmPasswordField = fieldValue;\r\n      if (passwordField !== confirmPasswordField) {\r\n        setFormFields({\r\n          ...formFields,\r\n          [fieldName]: {\r\n            value: fieldValue,\r\n            errors: ['Passwords do not match']\r\n          }\r\n        });\r\n      } else {\r\n        setFormFields({\r\n          ...formFields,\r\n          [fieldName]: { value: fieldValue, errors: [] }\r\n        });\r\n      }\r\n    }\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}