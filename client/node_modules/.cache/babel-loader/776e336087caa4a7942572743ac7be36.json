{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\John\\\\Desktop\\\\Web Dev\\\\watch-list\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"C:\\\\Users\\\\John\\\\Desktop\\\\Web Dev\\\\watch-list\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport { useState } from 'react';\n\nconst useForm = () => {\n  const _useState = useState({\n    username: '',\n    password: '',\n    confirmPassword: ''\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        formFields = _useState2[0],\n        setFormFields = _useState2[1];\n\n  const _useState3 = useState({\n    username: [],\n    password: [],\n    confirmPassword: []\n  }),\n        _useState4 = _slicedToArray(_useState3, 2),\n        formErrors = _useState4[0],\n        setFormErrors = _useState4[1];\n\n  useEffect(() => {});\n  let passwordMatchError = false;\n\n  const checkInputErrors = (fieldName, fieldValue) => {\n    switch (fieldName) {\n      case 'username':\n        {\n          const errors = [];\n\n          if (fieldValue.includes(' ')) {\n            errors.push('Username cannot contain spaces');\n          }\n\n          if (fieldValue.length < 1) {\n            errors.push('Username is required');\n          }\n\n          setFormErrors(_objectSpread({}, formErrors, {\n            [fieldName]: errors\n          }));\n          break;\n        }\n\n      case 'password':\n        {\n          const errors = [];\n\n          if (fieldValue.includes(' ')) {\n            errors.push('Password cannot contain spaces');\n          }\n\n          if (fieldValue.length < 6) {\n            errors.push('Password must contain at least 6 characters');\n          }\n\n          if (passwordMatchError) {\n            setFormErrors(_objectSpread({}, formErrors, {\n              [fieldName]: errors,\n              confirmPassword: ['Passwords do not match']\n            }));\n            break;\n          } else {\n            setFormErrors(_objectSpread({}, formErrors, {\n              [fieldName]: errors,\n              confirmPassword: []\n            }));\n            break;\n          }\n        }\n\n      case 'confirmPassword':\n        {\n          if (passwordMatchError) {\n            setFormErrors(_objectSpread({}, formErrors, {\n              [fieldName]: ['Passwords do not match']\n            }));\n          } else {\n            setFormErrors(_objectSpread({}, formErrors, {\n              [fieldName]: []\n            }));\n          }\n        }\n    }\n  };\n\n  const updateFormFields = (field, confirmPasswordElem, passwordElem) => {\n    const fieldName = field.target.name;\n    const fieldValue = field.target.value;\n\n    if (confirmPasswordElem && passwordElem && confirmPasswordElem.current.value !== passwordElem.current.value) {\n      passwordMatchError = true;\n    }\n\n    checkInputErrors(fieldName, fieldValue);\n    setFormFields(_objectSpread({}, formFields, {\n      [fieldName]: fieldValue\n    }));\n  };\n\n  return {\n    updateFormFields,\n    formFields,\n    formErrors\n  };\n};\n\nexport default useForm;","map":{"version":3,"sources":["C:\\Users\\John\\Desktop\\Web Dev\\watch-list\\client\\src\\hooks\\useForm.js"],"names":["useState","useForm","username","password","confirmPassword","formFields","setFormFields","formErrors","setFormErrors","useEffect","passwordMatchError","checkInputErrors","fieldName","fieldValue","errors","includes","push","length","updateFormFields","field","confirmPasswordElem","passwordElem","target","name","value","current"],"mappings":"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","sourcesContent":["import { useState } from 'react';\r\n\r\nconst useForm = () => {\r\n  const [formFields, setFormFields] = useState({\r\n    username: '',\r\n    password: '',\r\n    confirmPassword: ''\r\n  });\r\n\r\n  const [formErrors, setFormErrors] = useState({\r\n    username: [],\r\n    password: [],\r\n    confirmPassword: []\r\n  });\r\n\r\n  useEffect(()=> {\r\n    \r\n  })\r\n\r\n  let passwordMatchError = false;\r\n\r\n  const checkInputErrors = (fieldName, fieldValue) => {\r\n    switch (fieldName) {\r\n      case 'username': {\r\n        const errors = [];\r\n        if (fieldValue.includes(' ')) {\r\n          errors.push('Username cannot contain spaces');\r\n        }\r\n\r\n        if (fieldValue.length < 1) {\r\n          errors.push('Username is required');\r\n        }\r\n\r\n        setFormErrors({ ...formErrors, [fieldName]: errors });\r\n        break;\r\n      }\r\n\r\n      case 'password': {\r\n        const errors = [];\r\n        if (fieldValue.includes(' ')) {\r\n          errors.push('Password cannot contain spaces');\r\n        }\r\n\r\n        if (fieldValue.length < 6) {\r\n          errors.push('Password must contain at least 6 characters');\r\n        }\r\n\r\n        if (passwordMatchError) {\r\n          setFormErrors({\r\n            ...formErrors,\r\n            [fieldName]: errors,\r\n            confirmPassword: ['Passwords do not match']\r\n          });\r\n          break;\r\n        } else {\r\n          setFormErrors({\r\n            ...formErrors,\r\n            [fieldName]: errors,\r\n            confirmPassword: []\r\n          });\r\n          break;\r\n        }\r\n      }\r\n\r\n      case 'confirmPassword': {\r\n        if (passwordMatchError) {\r\n          setFormErrors({\r\n            ...formErrors,\r\n            [fieldName]: ['Passwords do not match']\r\n          });\r\n        } else {\r\n          setFormErrors({\r\n            ...formErrors,\r\n            [fieldName]: []\r\n          });\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  const updateFormFields = (field, confirmPasswordElem, passwordElem) => {\r\n    const fieldName = field.target.name;\r\n    const fieldValue = field.target.value;\r\n\r\n    if (\r\n      confirmPasswordElem &&\r\n      passwordElem &&\r\n      confirmPasswordElem.current.value !== passwordElem.current.value\r\n    ) {\r\n      passwordMatchError = true;\r\n    }\r\n    checkInputErrors(fieldName, fieldValue);\r\n\r\n    setFormFields({ ...formFields, [fieldName]: fieldValue });\r\n  };\r\n\r\n  return { updateFormFields, formFields, formErrors };\r\n};\r\n\r\nexport default useForm;\r\n"]},"metadata":{},"sourceType":"module"}